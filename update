#!/bin/bash

# keep only n kernels, 0 to disable pruning
PRUNE_KERNELS="3"
SYNC_AGE="604800" # one week

# re-exec ourselves with sudo if not root
[[ "$UID" -ne "0" ]] && exec sudo $0 $@

JOBS=$(($(cat /proc/cpuinfo | grep MHz | wc -l) + 1))
RED=$(echo -ne "\e[1;31m")
GREEN=$(echo -ne "\e[1;32m")
BLUE=$(echo -ne "\e[1;34m")
CYAN=$(echo -ne "\e[1;36m")
DEFAULT=$(echo -ne "\e[0m")
MOUNTED_BOOT="0"

run_command() {
    CMD=$1
    header "$CMD"
    $CMD
    CODE=$?
    if [[ "$CODE" -ne "0" ]]; then
        echo -e "\n  ${RED}Died running '$CMD'${DEFAULT}\n"
        exit $CODE
    fi
}

check_for_new_kernel() {
    # skip kernel stuff if we arent using the gentoo-kernel package
    if ! grep -q '^sys-kernel/gentoo-kernel' /var/lib/portage/world; then
        return
    fi

    # we do the grep so messages about eselect news dont throw off the count
    if [[ "$(emerge --quiet --pretend --update gentoo-kernel | grep gentoo-kernel | wc -l)" -gt "0" ]]; then
        mount /boot 2>/dev/null
        [[ "$?" -eq  "0" ]] && MOUNTED_BOOT=1
        important "A new kernel will be installed.\n\
  Please remove the oldest one to make space\n\
  in /boot, and then press enter to continue."
        read
    fi
}

header() {
    echo "${BLUE}### $1 ${DEFAULT}"
}

important() {
    echo -e "\n  ${CYAN}$1${DEFAULT}\n"
}

remove_kernel() {
    KERNEL=$1
    if ! echo "$KERNEL" | grep -Pq '\d+\.\d+\.\d+'; then
        echo "'$KERNEL' does not look like a kernel version"
        exit 1
    fi
    SHORT_KERNEL=$(echo $KERNEL | sed -e 's/-gentoo-dist$//')
    equery l '*' | grep -P "^sys-kernel/(gentoo|vanilla)-(kernel|sources)(-bin)?-($KERNEL|$SHORT_KERNEL)\$" | xargs -r emerge -C
    rm -rf /boot/{System.map,config,vmlinuz}-$KERNEL /boot/initramfs-$KERNEL.img /lib/modules/$KERNEL /usr/src/linux-$KERNEL
}

prune_kernels() {
    if ! [[ "$PRUNE_KERNELS" -gt "0" ]]; then
        return
    fi
    KERNEL_LIST=$(eselect kernel list | sed -ne 's/^.*linux-\([^ ]*\) *\**/\1/p')
    CURRENT=$(uname -r)
    # put the current kernel at the bottom of the list so it doesnt get pruned
    KERNEL_LIST=$(echo "$KERNEL_LIST" | grep -v "^$CURRENT$"; echo "$CURRENT")
    REMOVE_LIST=$(echo "$KERNEL_LIST" | head -n -$PRUNE_KERNELS)
    KEEP_LIST=$(echo "$KERNEL_LIST" | tail -n $PRUNE_KERNELS)
    if [[ -z "$REMOVE_LIST" ]]; then
        return
    fi
    echo "One or more kernels will be removed:"
    echo -n "  remove: ${RED}"
    echo "$REMOVE_LIST" | tr '\n' ' '
    echo "${DEFAULT}"
    echo -n "    keep: ${GREEN}"
    echo "$KEEP_LIST" | tr '\n' ' '
    echo "${DEFAULT}"
    echo -n "Press enter to confirm (Control-C to cancel). "
    read
    for KERNEL in $REMOVE_LIST; do
        header "removing kernel $KERNEL"
        remove_kernel "$KERNEL"
    done
}

synced_recently() {
    LAST_SYNC=$(date -d "$(cat /usr/portage/metadata/timestamp.chk)" +%s)
    NOW=$(date +%s)
    if [[ "$(($NOW - $LAST_SYNC))" -lt "$SYNC_AGE" ]]; then
        return 0
    fi
    return 1
}

lines() {
    LINES=0
    while read; do
        LINES=$(($LINES + 1))
        echo -ne "\r$LINES "
    done
    echo
}


synced_recently || run_command "emerge --sync | lines"

check_for_new_kernel

run_command "emerge --ask --quiet-build --verbose --jobs $JOBS --update --deep --newuse @world"

find '/etc' -name '._cfg????_*' | grep -q . && header "dispatch-conf"
dispatch-conf

run_command "emerge --ask --quiet-build --verbose --jobs $JOBS @preserved-rebuild"

find '/etc' -name '._cfg????_*' | grep -q . && header "dispatch-conf"
dispatch-conf

# add all installed kernel packages to the world file so they arent depcleaned
# sed adds '=' to the beginning of each sys-kernel/gentoo-sources-* package
equery l 'sys-kernel/*' | sed -ne 's/^\(sys-kernel\/gentoo-kernel\)/=\1/p' | xargs emerge -qu

run_command "emerge --ask --depclean"

prune_kernels

NEWS=$(eselect news list | awk '{if($2=="N")print}')
echo "$NEWS" | grep -q . && header "eselect news list"
echo "$NEWS"

if [[ "$(uname -r)" != "$(eselect kernel list | sed -ne 's/.*linux-\(.*\) \*/\1/p')" ]]; then
    if [[ -e "/usr/sbin/grub-mkconfig" ]]; then
        run_command "grub-mkconfig -o /boot/grub/grub.cfg"
        important "New kernel installed, please reboot!"
    else
        important "New kernel installed, please edit grub config and reboot!"
    fi
fi

[[ "$MOUNTED_BOOT" -eq "1" ]] && umount /boot
# so we exit 0 even if $MOUNTED_BOOT is 0
true

# TODO
# update perl modules in ~/perl5
