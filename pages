#!/usr/bin/perl
#
# this script prints out which pages are currently open in firefox or mozilla.
# by default it lists firefox pages unless you pass the '-m' option for
# mozilla.  
#
# firefox 2.0 stores this information automatically, but for this
# script to work with firefox 1.x or mozilla you'll need the sessionsaver
# extension installed.  
#
# try the '-v' switch for more verbose information.
#
# now you need to have dev-perl/JSON installed

use Getopt::Std;

getopts('msvcd:');

$dir = glob "$ENV{HOME}/.mozilla/firefox/*.default";
$dir = glob "$ENV{HOME}/.mozilla/default/*.slt" if $opt_m;
$dir = glob "$ENV{HOME}/.mozilla/seamonkey/*.default" if $opt_s;
$dir = $opt_d if $opt_d;

$file = "$dir/prefs.js";
$file = "$dir/sessionstore.js" if -e "$dir/sessionstore.js";
$file = "$dir/sessionstore.json" if -e "$dir/sessionstore.json";
$file = "$dir/sessionstore-backups/recovery.bak" if -e "$dir/sessionstore-backups/recovery.bak";
$file = "$dir/sessionstore-backups/recovery.jsonlz4" if -e "$dir/sessionstore-backups/recovery.jsonlz4";

die unless open(INPUT, "<$file");

if($file =~ /sessionstore/) { 
    require JSON;
    my $input = join "", <INPUT>;
    close INPUT;
    if($file =~ /\.jsonlz4$/) {
        use lib "$ENV{HOME}/perl5/lib/perl5";
        require Compress::LZ4;
        $input = substr $input, 8;
        $input = Compress::LZ4::decompress $input;
    } else {
        $input =~ s/^\((.*)\)$/$1/sm;
    }
    my $tree = JSON::decode_json($input);

    my $win = 0;
    if($opt_c) {
        my $cur_win = $tree->{selectedWindow} - 1;
        my $cur_tab = $tree->{windows}->[$cur_win]->{selected} - 1;
        my $cur_hist = $tree->{windows}->[$cur_win]->{tabs}->[$cur_tab]->{index} - 1;

        print "window: $cur_win\ntab: $cur_tab\nhist: $cur_hist\n" if $opt_v;
        print $tree->{windows}->[$cur_win]->{tabs}->[$cur_tab]->{entries}->[$cur_hist]->{url}, "\n";
        exit;
    }
    for(@{$tree->{windows}}) {
        print "Window ", $win++, ":\n" if @{$tree->{windows}} > 1;
        for(@{$_->{"tabs"}}) {
            if($opt_v) {
                print "hist_num: ", $_->{"index"}, "\n";
                print "  ", $_->{"url"}, "\n" for @{$_->{"entries"}};
            }
            #print $_->{"entries"}[$_->{"index"} - 1]{"url"}, "\n";
            my $index = $_->{"index"};
            my $entries = $_->{entries};
            my $entry = $entries->[$index - 1];
            my $url = $entry->{"url"};
            print "$url\n";
        }
        if($opt_v) {
            print "Recently Closed Tabs:\n" if @{$_->{"_closedTabs"}};
            for(@{$_->{"_closedTabs"}}) {
                print "  ", $_->{"state"}{"entries"}[$_->{"state"}{"index"} - 1]{"url"}, "\n";
            }
        }
    }
} else {
    @lines = <INPUT>;
    $num_sessions = grep { /sessionsaver\.windows\.session/ } @lines;
    for(@lines) {
        next unless /sessionsaver\.windows\.session/;
        ($session_num, $string) = /^.*?".*?(\d+)".*?(z1[ |].+)  ?\d+"\);$/; 
        next unless $string;
        @tabs = split /[ |]\|\|/, $string;
        print "Session $session_num:\n" if $num_sessions > 1;
        for(@tabs) {
            ($hist_num, $string) = /z1[ |]\|(\d+)[ |]\|-?\d+,-?\d+\| ?(.*)/;
            @urls = split /[ |]\|-?\d+,-?\d+\| ?/, $string;
            if($opt_v) { print "hist_num: $hist_num\n"; print "  $_\n" for @urls };
            print "$urls[$hist_num]\n";
        }
    }
}

close INPUT;
