#!/usr/bin/perl

use strict;
use warnings;
use LWP::Simple;
use Data::Dumper;
use Getopt::Std;
use XML::Simple;

my $tvdb_url = "http://www.thetvdb.com/api/";
my $api_key = "232FED794A5A8D27";

my $cache_file;
if(-d "$ENV{HOME}" && -w "$ENV{HOME}") {
    $cache_file = "$ENV{HOME}/.episode_cache";
} else {
    $cache_file = "/tmp/episode_cache";
}

my ($title, $subtitle, $ext, %data, %opts);

sub parse_args {
    getopts('luhvcdi', \%opts);
    HELP_MESSAGE() if $opts{h};
    if(@ARGV == 2) { 
        ($title, $subtitle) = @ARGV;
    }
    elsif(@ARGV == 1) {
      if( $opts{d} ){
        ($title, $subtitle, $ext) = $ARGV[0] =~ 
        /^(.+?) - (?:[-\dsex]* - )?(.+?)(\.[a-z]{2,4})?$/i;
      }
      else{
        ($title, $subtitle, $ext) = $ARGV[0] =~ 
        /^(.+?)[- _]+[-\dsex]*[- _]+(.+?)(\.[a-z]{2,4})?$/i;
      }
        $title ||= $ARGV[0];

        #print "$title|$subtitle|$ext\n";
    }
    else { 
        print "bad arguments\n"; 
        HELP_MESSAGE(); 
    }
    for($title, $subtitle) { y/_/ / if $_ };
    $ext ||= "";
}

sub HELP_MESSAGE {
    print <<EOF;

usage:
    episodes <options> <title>
    episodes <options> <title> <subtitle>
    episodes <options> <filename>

options:
    -c    cache-only (skip internet lookups)
    -i    internet-only (skip cache lookup)
    -h    print help message
    -l    lowercase filenames
    -u    convert spaces to underscores
    -v    verbose info
    -d    segments of the title are delimited with the ' - ' squence

EOF
    exit 1;
}

sub simple {
    my $word = $_[0] || "";
    for($word) { s/&#\d+?;/'/g; y/A-Z /a-z_/; y/-a-z_0-9//cd; }
    return $word;
}

sub load_cache {
    -e $cache_file ? %{do $cache_file} : ();
}

sub find_match {
    my $simp_sub = simple($subtitle);

    my $result = $data{simple($title)}{$simp_sub} || "";
    unless($result) {
        for(keys %{$data{simple($title)}}) {
            $result = $data{simple($title)}{$_} if /$simp_sub.*/;
        }
    }
    unless($result) {
        for(keys %{$data{simple($title)}}) {
            $result = $data{simple($title)}{$_} if /.*$simp_sub.*/;
        }
    }
    # This code fixes a problem where if you search for a show with & in the
    # title it works and returns and where as if you search for title with the
    # and the search fails. I'm sure there are other such times that can be
    # added here.
    unless($result) {
        $simp_sub =~ s/and//g;
        for(keys %{$data{simple($title)}}) {
            $result = $data{simple($title)}{$_} if /.*$simp_sub.*/;
        }
    }
    return format_match($result);
}

sub grab_eps {
    # invalidate the cache for this show
    delete $data{simple($title)};

    my $content = XMLin(&get($tvdb_url . "GetSeries.php?seriesname=" . $title), KeyAttr => [], ForceArray => [ "Series" ]);
    my $show_url = $tvdb_url . $api_key . "/series/" . $content->{Series}->[0]->{seriesid} . "/all/";
    my $title = $content->{Series}->[0]->{SeriesName};
    print "$title ($show_url)\n" if $opts{v};
    my $episodes = XMLin(&get($show_url), KeyAttr => []);
    my $season_length = 0;
    for(@{$episodes->{Episode}}) {
        $season_length = length $_->{SeasonNumber} if length $_->{SeasonNumber} > $season_length;
    }
    for(@{$episodes->{Episode}}) {
        $data{simple($title)}{simple($_->{EpisodeName})} = sprintf("%s - %0*d%02d - %s", $title, $season_length, $_->{SeasonNumber}, $_->{EpisodeNumber}, $_->{EpisodeName});
        print "    found episode: ", $_->{EpisodeName}, "\n" if $opts{v};
    }

    write_cache();
}

sub write_cache {
    open CACHE, ">$cache_file" 
        or die "could not open '$cache_file' for writing: $!\n";
    print CACHE Dumper \%data;
    close CACHE;
}

sub format_match {
    $_[0] =~ s/&#039/'/g;
    $_[0] =~ s/&#133/.../g;
    $_[0] =~ s/&#150/-/g;
    $_[0] =~ s/&/and/g;
    $_[0] =~ s/([^-_A-Za-z0-9 .,'()%?!])+/ /g;
    $_[0] =~ s/ +/ /g;
    $_[0] = lc $_[0] if $opts{l};
    $_[0] =~ s/ (- )?/_/g if $opts{u};
    if($opts{u} && $opts{l}) {
        $_[0] =~ y/'.//d;
        $_[0] =~ s/([^-a-z_0-9])+/_/g;
        $_[0] =~ y/_/_/s;
        $_[0] =~ s/_+$//;
        $_[0] =~ s/_---_/__/;
    }
    $_[0] =~ s/ --- / - /;
    return $_[0];
}

parse_args();
%data = load_cache();
if($subtitle) {
    my $match = find_match() unless $opts{i};
    if(!$match && !$opts{c}) {
        grab_eps();
        $match = find_match();
    }
    print $match ? "$match" : format_match("$title --- $subtitle"), "$ext\n"; 
} else {
    grab_eps() if ($opts{i} || !$data{simple($title)});
    print format_match($_), "\n" for sort values %{$data{simple($title)}};
}
