#!/usr/bin/perl

use strict;
use warnings;
use Date::Parse "str2time"; # from dev-perl/TimeDate
use MIME::Words "decode_mimewords"; # from dev-perl/MIME-tools
use Mail::IMAPClient; # from dev-perl/Mail-IMAPClient
use POSIX "strftime";
use Getopt::Std;
use IO::Socket::SSL; # from dev-perl/IO-Socket-SSL
use Term::ReadKey; # from dev-perl/TermReadKey

# parse arguments
my %opts;
getopts('s:nf', \%opts);
if(    (defined($opts{s}) && $opts{n}) 
    || (defined($opts{s}) && $opts{f})
    || ($opts{n} && $opts{f})) {
    die "-s -n and -f are mutually exclusive\n";
}
my $now = strftime "%s", localtime;
my $width = 0;
eval { ($width) = GetTerminalSize(); };

# grab authentication info
my ($host, $user, $pass) = @{do "$ENV{HOME}/.imapls"};

# open an ssl socket since gmail is over ssl
my $sock = IO::Socket::SSL->new(
    SSL_verify_mode => SSL_VERIFY_PEER,
    SSL_ca_path => '/etc/ssl/certs',
    PeerHost => $host) or die "socket(): $@";
my $greeting = <$sock>;
die "problems logging in: $greeting" unless $greeting =~ ' OK ';

# use the socket and our credentials to open an imap connection
my $imap = Mail::IMAPClient->new(
    RawSocket => $sock,
    User      => $user,
    Password  => $pass,
) or die "Cannot imap: $@";

# figure out what we are searching for
my @search = ("ALL");
@search = ("UNSEEN") if $opts{n};
@search = ("FLAGGED") if $opts{f};
@search = ('OR', 'OR', 'TO', $imap->Quote($opts{s}), 
    'FROM', $imap->Quote($opts{s}),
    'SUBJECT', $imap->Quote($opts{s})) if $opts{s};

# connect and login
$imap->State($imap->Connected);
$imap->login() or die "cannot login: $@\n";
print "could not authenticate\n" unless $imap->IsAuthenticated();

# get a list of all folders
my @folders = @ARGV;
@folders = $imap->folders() unless @folders;
for(@folders) {
    my @emails;
    # skip some special cases
    next if /^\[Gmail\]\/(All Mail|Spam|Starred|Sent Mail|Important)$/;
    # open the folder read-only
    $imap->examine($_);
    # list unread messages
    my $msgs = $imap->search(@search);
    next unless $msgs && @{$msgs};
    # print out a folder header
    print "* $_(", scalar @{$msgs}, ")\n";
    my $headers = $imap->parse_headers($msgs, "Date", "From", "Subject");
    my $flags = $imap->flags($msgs);
    for(keys %{$headers}) {
        my $epoch = &get_epoch($headers->{$_}->{Date}->[0]);
        push @emails, {
            epoch => $epoch,
            date => &format_date($epoch, $now),
            from => &format_from($headers->{$_}->{From}->[0]),
            subject => &format_subject($headers->{$_}->{Subject}->[0]),
            flags => &format_flags($flags->{$_}),
        }
    }

    # print everything out nicely sorted by date
    for(sort { $a->{epoch} <=> $b->{epoch} } @emails) {
        printf "  %-2s %-11s  %-23.23s  %-s\n", $_->{flags}, $_->{date}, $_->{from}, $_->{subject};
    }

}

$imap->logout();

sub get_epoch {
    my $epoch = str2time $_[0];
    $epoch ||= 0;
    return $epoch;
}

sub format_date {
    # format a date nicely
    my $date;
    my $epoch = $_[0];
    my $now = $_[1];
    if(($now - $epoch) < 60*60) {
        my $amount = ($now - $epoch) / 60;
        $date = sprintf "%2d min%s ago", $amount, $amount>=2?"s":" ";
    } elsif(($now - $epoch) < 60*60*24) {
        my $amount = ($now - $epoch) / 60 / 60;
        $date = sprintf "%2d hr%s  ago", $amount, $amount>=2?"s":" ";
    } elsif(($now - $epoch) < 60*60*24*7) {
        my $amount = ($now - $epoch) / 60 / 60 / 24;
        $date = sprintf "%2d day%s ago", $amount, $amount>=2?"s":" ";
    } else {
        $date = strftime "%b %d %Y", localtime $epoch;
    }
    return $date;
}

sub format_from {
    # format a from field nicely
    my $from = $_[0] || "";
    $from =~ s/^ *(?:"?(.+?)"? *<.+>|<?(.+?)>?)$/$+/i;
    $from = $1 if $from =~ /^\\"(.*)\\"$/;
    $from =~ s/\n//g;
    $from = decode_mimewords($from) if($from =~ /^=\?(ISO-8859-1|koi8-r|utf-?8|windows-1252)\?/i);
    $from = "$2 $1" if $from =~ /^(.*?), (.*)$/;
    return $from;
}

sub format_subject {
    # format a subject field nicely
    my $subject = $_[0] || "";
    $subject =~ s/\n//g;
    $subject =~ s/\t+/ /g;
    $subject = decode_mimewords($subject) if($subject =~ /^=\?(ISO-8859-1|koi8-r|utf-?8|windows-1252)\?/i);
    substr($subject, $width - 46) = "..." if($width && length $subject > $width - 43);
    return $subject;
}

sub format_flags {
    # get info on the message flags
    my %flags;
    # we're passed an array of flags, stuff it into a hash for easy querying
    $flags{$_} = 1 for @{$_[0]};
    my $flag_string = sprintf "%s%s",
        exists($flags{"\\Seen"})?" ":"N",
        exists($flags{"\\Flagged"})?"!":" ";
    return $flag_string;
}

=for comment

TODO:

add a help function to print out usage
maybe an option to just list all folders and quit
make the default be to print out all flagged and new messages
add an option to print out all messages
better error handly especially for when there is no .imapls file
