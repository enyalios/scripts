#!/usr/bin/perl

use strict;
use warnings;
use LWP::Simple;
use DBI;
use POSIX "ceil";
use Getopt::Std;

# Static variables
my $imageTime = "1:00";


# Database
my $database = "mythconverg";
my $hostname = "localhost";
my $user = "mythtv";
my $password = "mythtv";

# we don't handle arguments yet so for now use this
my %opts;

# mostly here for debuggin, not really used.
sub PrintEpisode {

  my ($ref) = @_;

  print "Title: $ref->{title}\n";
  print "Number: $ref->{number}\n";
  print "Year: $ref->{year}\n";
  print "Director: $ref->{director}\n";
  print "Rating: $ref->{rating}\n";
  print "Plot: $ref->{plot}\n";
  print "-----------------------\n";

}

# this takes in a title to search for on tv.com and handles all the parsing
sub GetData {
  my ($old_title) = my ($title) = @_;
  $title =~ s/_/ /;
  (my $show_url, $title ) = get("http://www.tv.com/search.php?type=11&stype=program&qs=$title&tag=filter;tv_shows") =~ /<a class="f-bold f-C30" href="(.*summary\.html).*?">(.*?)<\/a>/;
  print "Could not find show '$old_title'\n" and die unless $show_url;
  $show_url =~ s/summary\.html$/episode_guide.html?printable=1/;

  my @list;

  # the first item in the list we return is the nice title of the show and the second is the title we looked up.
  push @list, $title, $old_title;

  my $page = get $show_url;

  foreach( split(/<div class="pl-5 pr-5">/,$page)){
    my %episode;
   
    ($episode{number}, $episode{title}) =  $_ =~ 
	m!<h1><a.*>\s+(\d+|Pilot|Special)\.\s+(.*)\s+</a> </h1>!;
    ($episode{year}) = $_ =~ m|First aired:</span>\s*\d+/\d+/(\d+)<br/>|;
    ($episode{director}) = $_ =~ m|Director:</span>\s+<a href=".*"> (.*)</a>|;
    ($episode{rating}) = $_ =~ m|Global rating:</span>\s+<a href.*>(\d+\.\d+)</a>|;
    ($episode{plot}) = $_ =~ m|</div>\s+<p>(.*)</p>\s+</div>|s;

    push @list, \%episode if $episode{title};
  }
  return @list;
}

# this takes the list produced above and matches it to filenames that
# appear in the mythtv database. it does episode title matching to figure
# things out, but handles duplicate episode titles correctly.
sub UpdateShow {

  my ($select_query, $update_query, $imagePath, $show, $old_title, @shows) = @_;

  my %duplicateEpisodeCount;

  #always strip evil chars out of the show name
  $show =~ s/[:\*\?"<>\\\/|]//g;

  foreach my $ref (@shows){

    # This count lets us know how many episodes of any given title
    # we have processed. Shows are listed chronologically we rely on this
    # to sort out problems with 1 show having 2 episodes that have the exact
    # same canonical name. 
    $duplicateEpisodeCount{$ref->{title}}++;

    # these guys control the changes that are made to the title to try and
    # and find a file name match.
    my $modifyTitleCounter = 0;
    my $modifyTitleCounterMax = 5;

    # this holds the return values from our sql queries.
    my $listRef;

    do{

      #this part of the loop formats the title correctly for this iteration
      my $workingTitle = $ref->{title};
      my $workingShow = $show;
      # always remove these evil chars, they will never be in file names
      $workingTitle =~ s/[:\*\?"<>\\\/|\x91\x92]//g;
      $workingTitle =~ s/&/and/g;
      $workingTitle =~ s/À/A/g;
      $workingTitle =~ s/à/a/g;
      $workingTitle =~ s/é/e/g;
      $workingTitle =~ s/'/'/g;


      $workingShow =~ s/[:\*\?"<>\\\/|\x91\x92]//g;
      $workingShow =~ s/&/and/g;
      $workingShow =~ s/À/A/g;
      $workingShow =~ s/à/a/g;
      $workingShow =~ s/é/e/g;

      # The order of things is important here! Consider the example
      # Spin City - 425 - Goodbye 1.avi
      # Spin City - 426 - Goodbye 2.avi
      # both fail the first match cause tv.com uses (1) and (2)
      # both match exactly 1 when we remove parens, looking stops here
      # but if we continues both would match if we removes the numbers, which
      # is what removing parenthetical references, step 2, does.
      # Step 1 must come before step 2!

      # step 3 for paul's stuff is roughly independent and can be placed
      # before or after steps 1 and 2.

      # On 0 try the title as is, with evil chars ^above^ removed of course.
      # On 2 try title without parens
      if( $modifyTitleCounter == 2 ){
        $workingTitle =~ s/[\(\)]//g;
      }
      # On 3 try title with parenthetical phrases removed
      elsif( $modifyTitleCounter == 3 ){
        $workingTitle =~ s/\s*\(.*?\)\s*//g;
      }
      # on 4 try paul's filename format
      elsif( $modifyTitleCounter == 4 ){
        $workingShow = $old_title;
        for($workingTitle, $workingShow) {
          $_ = lc;
          s/ - /_/g;
          s/ /_/g;
          s/[^-\w]//g;
        }
      }

      # now get all the id's for episodes that match the current formatting
      # of the title
      # we depend of sorting by filename to return episodes in chronological order.
	
      #on try 0 check for the workingTitle exactly as it appears
      if( $modifyTitleCounter == 0 ){
         $select_query->execute("%$workingShow% - $workingTitle.%");
	 print "\tsearching for \"$workingShow% - $workingTitle.\"\n" if $opts{v};
      }
      else{
         $select_query->execute("%$workingShow%$workingTitle%");
         print "\tsearching for \"%$workingShow%$workingTitle%\"\n" if $opts{v};
      }
      $listRef = $select_query->fetchall_arrayref();

      $modifyTitleCounter++;

      # if we got any results or if we have tired all variations then stop
    } until( @{$listRef} > 0 || $modifyTitleCounter > $modifyTitleCounterMax);

    #if we got results
    print "Could not find match for '$show - $ref->{title}'\n" and next unless(@{$listRef});

    # This little expression does the figuring for the duplicate episode
    # title situation. It also handles single titles gracefully. We have a
    # count of how many episodes with this canonical title we have seen so
    # far. We also have a list of all the episodes with this cannonical title
    # in chronological order. Use the Nth item in the list where N = the
    # count in the hash. -1 corrects for array position from the count.

    # This only works because everything is in chronological order!
    next unless @{$listRef}[$duplicateEpisodeCount{$ref->{title}}-1];
    my ($intid, $inetref, $filename) = @{@{$listRef}[$duplicateEpisodeCount{$ref->{title}}-1]};
    (my $nice_title = $filename) =~ s#.*/##;
	$inetref = -1 if $inetref !~ m/^\d+$/;

    print "Skipped '$nice_title'\n" and next if($inetref != 0 && !$opts{f});

    #we need to make the plot SQL safe before we insert it.
    $ref->{plot} =~ s/\n//g;
    $ref->{plot} =~ s/\r//g;
    $ref->{plot} =~ s/\x92/'/g;
    $ref->{plot} =~ s/\x93/"/g;
    $ref->{plot} =~ s/\x94/"/g;
    $ref->{plot} =~ s/\x96/-/g;
    $ref->{plot} =~ s/<.*?>//g;

    # some shows may not have a number for some reason, if they don't we'll
    # use -1 for the inetref because we need something non zero. This will
    # also fix it if the number is zero.
    $ref->{number} = "-1" if $ref->{number} !~ /^\d+$/;

    # possibly optional, this function gets a screen capture
    # from the episode and places in the right place on the filesystem.
    # it returns the full path to the image.

    # we use midentify to get the real pixel widths.

    my %vinfo;
    /^(\w+)=(.*)$/, $vinfo{$1} = $2 for(split "\n", `midentify "$filename"`);
    my $image = GrabImage($imagePath, $show, $filename, $vinfo{"ID_VIDEO_WIDTH"}, $vinfo{"ID_VIDEO_HEIGHT"});

    print "Updated '$nice_title'\n" if $update_query->execute($ref->{director}, $ref->{plot}, $ref->{rating}, $ref->{year}, $ref->{number}, $image, int($vinfo{ID_LENGTH}/60), $intid);
  }
}

# This function will grab an image if needed for the given episode.
# It will return the filename.
sub GrabImage {

  my ( $imagePath, $show, $filename, $width, $height ) = @_;

  my $seasonEpNumber = ($filename =~ m/( - |_)([-\d]+)\1/)[1];

  # simplify the show title
  $show = lc($show);
  $show =~ s/\W//g;

  # make the directory for this show if we need to.
  mkdir "$imagePath/$show" unless -e "$imagePath/$show";
  die "$imagePath/$show is not a directory\n" unless -d "$imagePath/$show";

  if( $opts{f} && -e "$imagePath/$show/$seasonEpNumber.png"){
     unlink "$imagePath/$show/$seasonEpNumber.png";  
  }

  if ( $opts{f} && -e "$imagePath/$show/$seasonEpNumber.jpg"){
     unlink "$imagePath/$show/$seasonEpNumber.jpg"; 
  }

  # if the image for this show does not exist, make it
  unless(  -e "$imagePath/$show/$seasonEpNumber.png" || -e "$imagePath/$show/$seasonEpNumber.jpg" ){

    # get the right aspect ratio regardless of the input aspect ratio
    if( $width > $height*0.68289 ){
      $width = ceil($height*0.68289);
    }
    else{
      $height = ceil($width/0.68289);
    }

    # make mplayer do all the work for us.
    # TODO: Right now it drops the images in the current directory, it would
    # be good to put them in /tmp or something.
    system("mplayer -vf crop=$width:$height -nosound -vo png:z=9 -ss $imageTime -frames 5 \"$filename\" &> /dev/null");

	

    # Take the last frame and use it as the image for this show.
    rename "00000005.png", "$imagePath/$show/$seasonEpNumber.png";

    # clean up the current directory.
    unlink <0000000*.png>;
  }

  # returning the full path to insert in the database seems to be the best
  # way to avoid doing work twice, while still compartmentizing things.
  return "$imagePath/$show/$seasonEpNumber.png";
}

sub db_init {
  my $dbh = DBI->connect("DBI:mysql:database=$database;host=$hostname", $user, $password);
  my $update_query = $dbh->prepare("UPDATE videometadata SET director = ?, plot = ?, userrating = ?, year = ?, inetref = ?, coverfile = ?, length = ? WHERE intid = ?");
  my $select_query = $dbh->prepare("SELECT intid, inetref, filename FROM videometadata WHERE filename like ? ORDER BY filename ASC");
  my $rs = $dbh->prepare("select data from settings where value = 'VideoArtworkDir'");
  $rs->execute();
  my $imagePath = $rs->fetchall_arrayref()->[0]->[0];

  return $dbh, $update_query, $select_query, $imagePath;
}

sub print_help {
  print <<EOF;
  
Usage:
  tv-metadata [options] show1 [show2 ...]

Options:
  -h  	    This help screen
  -f        Force (override existing data)
  -t <time> Grab the screen captures at this time
  -m	    Display a list of all shows which are missing any info and exit.
  -a 	    Display a list of all shows which are missing all info and exit.
	        This is the default if no arguments are given.

EOF
  exit 1;
}

# MAIN --------------------------------------------------

getopts('vhfmat:', \%opts);
print_help() if $opts{h};

if( $opts{t} ){
	$imageTime = $opts{t};
	print "Image taken at time $opts{t}\n";
}

my ($dbh, $update_query, $select_query, $imagePath) = db_init();

if(@ARGV == 0 || $opts{m} || $opts{a}) {

  #empty out argv if its not empty (-m or -a specifed with a show)
  while( @ARGV ){ pop @ARGV; }

  my %shows;
  my $rs = $dbh->prepare("SELECT filename FROM videometadata WHERE filename like '%/tv/%' and inetref = 0");
  $rs->execute();
  $shows{$_}++ for(map { scalar($_->[0] =~ s#^.*/(.*?)(_| - )[-\d]+\2.*$#$1#, $_->[0]) } @{$rs->fetchall_arrayref()});
  $rs = $dbh->prepare("SELECT filename FROM videometadata WHERE filename like '%/tv/%' and inetref != 0");
  $rs->execute();
  if( !$opts{m} ){
  	$shows{$_} = 0 for(map { scalar($_->[0] =~ s#^.*/(.*?)(_| - )[-\d]+\2.*$#$1#, $_->[0]) } @{$rs->fetchall_arrayref()});
  } 
  $shows{$_} > 1 and push @ARGV, $_ for(keys %shows);
  print "$_\n" for @ARGV;
  exit
}

for my $show (@ARGV) {
  # get the data from tv.com
  my @episodes = GetData($show);

  # the first element of the @episodes array holds the show name
  UpdateShow($select_query, $update_query, $imagePath, @episodes);
}

$select_query->finish();
$dbh->disconnect();

# vim:sw=2:ts=8
