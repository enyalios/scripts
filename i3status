#!/usr/bin/perl

use strict;
use warnings;
use LWP::Simple;
use POSIX qw(strftime);
use JSON;
use Socket;
use utf8;
binmode(STDOUT, ":utf8");

my $SIOCGIFADDR = 0x8915;
my $SIOCGIWESSID = 0x8B1B;
my $benchmark = 0;
$benchmark = 1 if defined $ARGV[0] && $ARGV[0] eq "-benchmark";
my $click_commands = {
    "date"    => "xterm -e 'date; echo; cal -3; read'",
    "weather" => "firefox-bin -new-tab 'http://enyalios.net/cgi-bin/weather.cgi?zip=61874'",
    #     "weather" => {
    #         1 => "firefox-bin -new-tab 'https://www.wunderground.com/cgi-bin/findweather/getForecast?query=61874'",
    #         3 => "firefox-bin -new-tab 'https://radar.weather.gov/Conus/Loop/centgrtlakes_loop.gif'",
    #     },
};
my $count = 0;
my %traffic;
my $output = "json";
$output = "text" if -t *STDIN;

sub read_file {
    my $retval;
    open my $fh, "<", $_[0] or die "couldnt open $_[0]: $!\n";
    {
        local $/;
        $retval = <$fh>;
    }
    close $fh or die "couldnt close $_[0]: $!\n";
    chomp $retval;
    return $retval;
}

sub write_file {
    open my $fh, ">", $_[0] or die "couldnt open $_[0]: $!\n";
    print $fh $_[1];
    close $fh or die "couldnt close $_[0]: $!\n";
}

sub json {
    return $_[1] unless $output eq "json";
    my $sep_width = 21;
    my $sep = "";
    if($_[0] eq "battery" && $_[1] =~ /^Discharging/) {
        $sep_width = 0;
        $sep = ',"separator": false';
        $_[1] .= ", ";
    }
    my $string = "{";
    $string .= '"name": "' . $_[0] . '",';
    $string .= '"full_text": "' . $_[1] . '",';
    if(defined $_[2] && $_[2] ne "") {
        $string .= '"color": "#' . $_[2] . '",'
    }
    $string .= '"separator_block_width": ' . $sep_width;
    $string .= $sep;
    $string .= '}';
    return $string;
}

sub format_time {
    my $sec = $_[0];
    return sprintf "%02d:%02d:%02d", $sec/60/60, int($sec/60)%60, $sec%60;
}

sub create_socket {
    socket(my $socket, PF_INET, SOCK_DGRAM, 0) || return undef;
    return $socket;
}

sub get_ip {
    my ($iface, $socket) = @_;
    my $buf = pack('a256', $iface);
    if(ioctl($socket, $SIOCGIFADDR, $buf) && (my @address = unpack('x20 C4', $buf))) {
        return join('.', @address);
    }
    return undef;
}

sub get_essid {
    my ($iface, $socket) = @_;
    my $ssid_buff = "0"x32;
    my $ssid_info = pack("a16pSS", $iface, $ssid_buff, 32 , 0);
    ioctl($socket, $SIOCGIWESSID, $ssid_info) || return undef;
    my ($if,           # interface name
        $ssid_pointer, # ssid pointer
        $ssid_length,  # ssid length
        $ssid_flags    # ssid flag
    ) = unpack("a16pSS", $ssid_info);
    return undef unless $ssid_length;
    return substr($ssid_pointer, 0, $ssid_length);
}

sub find_wireless_device {
    for(sort glob "/sys/class/net/*/wireless") {
        return $1 if m{^/sys/class/net/(.*)/wireless$};
    }
    return undef;
}

sub get_battery_data {
    my $battery_file = "/sys/class/power_supply/BAT0/uevent";
    return undef unless -e $battery_file;
    my %info;
    for(split "\n",  read_file("$battery_file")) {
        my ($key, $value) = split "=", $_, 2;
        $info{$key} = $value;
    }
    return \%info;
}

sub weather {
    my (@stat) = stat "$ENV{HOME}/.weather";
    # file is <6 bytes, >50 bytes, or more than 30 minutes old
    if($stat[7] > 50 || $stat[7] < 6 || time - $stat[9] > 30*60) {
        my $zip = read_file("$ENV{HOME}/.zipcode");
        my $weather = get "http://enyalios.net/cgi-bin/weather.cgi?zip=$zip&output=tiny";
        write_file("$ENV{HOME}/.weather", $weather);
    }
    my $string = read_file("$ENV{HOME}/.weather");
    $string = "???" if(length $string > 50 || length $string < 6);
    my $color = "";
    $color = "8888ff" if $string =~ /snow/i;
    return json("weather", $string, $color);
}

sub load {
    my $string = read_file("/proc/loadavg");
    $string =~ s/ .*$//;
    my $color = "";
    if($string >= 1)      { $color = "ff0000"; }
    elsif($string >= .87) { $color = "ff2a2a"; }
    elsif($string >= .75) { $color = "ff5555"; }
    elsif($string >= .62) { $color = "ff552a"; }
    elsif($string >= .50) { $color = "ff8800"; }
    elsif($string >= .37) { $color = "ffc322"; }
    elsif($string >= .25) { $color = "ffff44"; }
    elsif($string >= .12) { $color = "ffffa1"; }
    return json("load", $string, $color);
}

sub date {
    return json("date", strftime("%-m/%-d %T", localtime()));
}

sub battery {
    my $battery = $_[0];
    return unless defined $battery;
    my $status = $battery->{POWER_SUPPLY_STATUS};
    $status = "Full" if $status eq "Unknown";
    my $percent = $battery->{POWER_SUPPLY_CAPACITY};
    my $text = "$status $percent%";
    if($status eq "Discharging") {
        my $charge = $battery->{POWER_SUPPLY_CHARGE_NOW} // $battery->{POWER_SUPPLY_ENERGY_NOW};
        my $current = $battery->{POWER_SUPPLY_CURRENT_NOW} // $battery->{POWER_SUPPLY_POWER_NOW};
        my $seconds = 0;
        $seconds = $charge/$current*60*60 if $current;
        my $remaining = format_time($seconds);
        $text .= " $remaining remaining";
    }
    my $color = "";
    if($status eq "Discharging") {
        if($percent <= 5 && $count%2) { $color = "000000"; }
        elsif($percent <= 5)  { $color = "ff0000"; }
        elsif($percent <= 10) { $color = "ff0000"; }
        elsif($percent <= 15) { $color = "ff2200"; }
        elsif($percent <= 20) { $color = "ff4400"; }
        elsif($percent <= 25) { $color = "ff6600"; }
        elsif($percent <= 30) { $color = "ff8800"; }
        elsif($percent <= 35) { $color = "ffc322"; }
        elsif($percent <= 40) { $color = "ffff44"; }
        elsif($percent <= 50) { $color = "ddff7f"; }
        elsif($percent <= 60) { $color = "bbffbb"; }
        elsif($percent <= 80) { $color = "ddffdd"; }
    }
    return json("battery", $text, $color);
}

sub watts {
    my $battery = $_[0];
    return unless defined $battery;
    return unless $battery->{POWER_SUPPLY_STATUS} eq "Discharging";
    my $watts;
    if(defined $battery->{POWER_SUPPLY_POWER_NOW}) {
        $watts = $battery->{POWER_SUPPLY_POWER_NOW};
        # power now is in microWatts
        $watts = sprintf "%.2f", $watts/1000000;
    } elsif(defined $battery->{POWER_SUPPLY_CURRENT_NOW}) {
        $watts = $battery->{POWER_SUPPLY_CURRENT_NOW}*$battery->{POWER_SUPPLY_VOLTAGE_NOW};
        # these are in microAmps and microVolts, respectively
        $watts = sprintf "%.2f", $watts/1000000000000;
    } else {
        return;
    }
    return json("watts", "$watts W");
}

sub network {
    my $dev = find_wireless_device();
    return unless defined $dev;
    my $socket = create_socket();
    my $essid = get_essid($dev, $socket);
    return json("network", "No wireless networks found", "ff2a2a") unless defined $essid;
    my $ip = get_ip($dev, $socket);
    return json("network", "Connecting to $essid", "ff8000") unless defined $ip;
    return json("network", $essid);
}

sub format_traffic {
    my $number = shift;
    my @sizes = split //, "BKMGTPEZY";
    my $index = 0;
    while($number >= 1000 || !$index) {
        $number /= 1024;
        $index++;
        last if $index >= @sizes - 1;
    }
    return sprintf "%.1f %s/s", $number, $sizes[$index];
}

sub traffic {
    my ($down, $up, $current_down, $current_up);
    for(split "\n", read_file("/proc/net/dev")) {
        next if /^ *lo:/;
        next unless s/^.*: *//;
        my @fields = split " ", $_;
        $down += $fields[0];
        $up += $fields[8]
    }
    my $time = time;
    if(defined $traffic{time} && $traffic{time} != $time) {
        $current_down = ($down - $traffic{down}) / ($time - $traffic{time});
        $current_up   = ($up   - $traffic{up})   / ($time - $traffic{time});
    }
    $traffic{down} = $down;
    $traffic{up}   = $up;
    $traffic{time} = $time;

    return json("traffic", "") unless defined $current_down;
    return json("traffic", sprintf("\x{25BC} %s, \x{25B2} %s", format_traffic($current_down), format_traffic($current_up)));
}


$| = 1;
print "{\"version\":1,\"click_events\":true}\n[\n" if $output eq "json";
my $pid = fork();
die "couldnt fork\n" unless defined $pid;
if($pid) {
    # parent
    close STDIN;
    my $sep = ($output eq "json")?",":" | ";
    while(++$count) {
        print "[" if $output eq "json";
        my $battery = get_battery_data();
        my $string = join($sep, traffic(), network(), weather(), battery($battery), watts($battery), load(), date());
        print $string unless $benchmark;
        print "]," if $output eq "json";
        print "\n" unless $benchmark;
        sleep 1 unless $benchmark;
        exit if $benchmark && $count >= 10000;
    }
} else {
    # child
    close STDOUT;
    open my $log, ">$ENV{HOME}/.i3/i3status.log" or die "couldnt open log: $!\n";
    # autoflush the $log filehandle
    select((select($log), $|=1)[0]);
    while(my $line = <STDIN>) {
        if($line =~ /^,?{/) {
            $line =~ s/^,//;
            my $tree = decode_json $line;
            my ($button, $name) = ($tree->{button}, $tree->{name});
            print $log "click event: name=$name, button=$button\n";
            my $command = $click_commands->{$name};
            $command = $command->{$button} if ref $command eq "HASH";
            if(defined $command) {
                print $log "executing command \"$command\"\n";
                system("$command &");
            }
        }
    }
}
