#!/usr/bin/perl

use strict;
use warnings;
use LWP::Simple;
use POSIX qw(strftime);
use JSON;

my %click_commands = (
    "date"    => "xterm -e 'date; echo; cal -3; read'",
    "weather" => "firefox-bin -new-tab 'https://www.wunderground.com/cgi-bin/findweather/getForecast?query=61874'",
);
my $count = 0;

sub read_file {
    open FILE, "<", $_[0];
    my $retval = <FILE>;
    close FILE;
    chomp $retval;
    return $retval;
}

sub write_file {
    open FILE, ">", $_[0];
    print FILE $_[1];
    close FILE;
}

sub json {
    my $sep_width = 21;
    my $sep = "";
    if($_[0] eq "battery" && $_[1] =~ /^Discharging/) {
        $sep_width = 0;
        $sep = ',"separator": false';
        $_[1] .= ", ";
    }
    my $string = "{";
    $string .= '"name": "' . $_[0] . '",';
    $string .= '"full_text": "' . $_[1] . '",';
    if(defined $_[2] && $_[2] ne "") {
        $string .= '"color": "#' . $_[2] . '",'
    }
    $string .= '"separator_block_width": ' . $sep_width;
    $string .= $sep;
    $string .= '}';
    return $string;
}

sub weather {
    my (@stat) = stat "$ENV{HOME}/.weather";
    # file is more than 50 bytes or more than 15 minutes old
    if($stat[7] > 50 || $stat[7] < 6 || time - $stat[9] > 15*60) {
        $_ = get "http://m.wund.com/cgi-bin/findweather/getForecast?&query=" . &read_file("$ENV{HOME}/.zipcode");
        my ($temp) = /<td>Temperature.*?<b>(.*?)<\/b>/s;
        my ($cond) = /<td>Conditions.*?<b>(.*?)<\/b>/s;
        &write_file("$ENV{HOME}/.weather", "$cond $temp");
    }
    my $string = read_file("$ENV{HOME}/.weather");
    $string = "???" if(length $string > 50 || length $string < 6);
    my $color = "";
    $color = "8888ff" if $string =~ /snow/i;
    return &json("weather", $string, $color);
}

sub load {
    my $string = read_file("/proc/loadavg");
    $string =~ s/ .*$//;
    my $color = "";
    if($string >= 1)      { $color = "ff0000"; }
    elsif($string >= .87) { $color = "ff2a2a"; }
    elsif($string >= .75) { $color = "ff5555"; }
    elsif($string >= .62) { $color = "ff552a"; }
    elsif($string >= .50) { $color = "ff8800"; }
    elsif($string >= .37) { $color = "ffc322"; }
    elsif($string >= .25) { $color = "ffff44"; }
    elsif($string >= .12) { $color = "ffffa1"; }
    return &json("load", $string, $color);
}

sub date {
    return &json("date", strftime("%-m/%-d %T", localtime()));
}

sub battery {
    return unless -x "/usr/bin/acpi";
    $_ = `acpi`;
    chomp;
    s/^.*?: //;
    s/^(Charg.*?%).*$/$1/;
    s/Unknown/Full/;
    y/,//d;
    my $color = "";
    if(/^Discharging /) {
        $color = "";
        (my $percent) = / (\d+)%/;
        if($percent <= 5 && $count%2) { $color = "000000"; }
        elsif($percent <= 5)  { $color = "ff0000"; }
        elsif($percent <= 10) { $color = "ff0000"; }
        elsif($percent <= 15) { $color = "ff2200"; }
        elsif($percent <= 20) { $color = "ff4400"; }
        elsif($percent <= 25) { $color = "ff6600"; }
        elsif($percent <= 30) { $color = "ff8800"; }
        elsif($percent <= 35) { $color = "ffc322"; }
        elsif($percent <= 40) { $color = "ffff44"; }
        elsif($percent <= 50) { $color = "ddff7f"; }
        elsif($percent <= 60) { $color = "bbffbb"; }
        elsif($percent <= 80) { $color = "ddffdd"; }
    }
    return &json("battery", $_, $color);
}

sub watts {
    my $batt_dir = "/sys/class/power_supply/BAT0";
    return unless -d $batt_dir;
    return unless &read_file("$batt_dir/status") eq "Discharging";
    my $watts;
    if(-e "$batt_dir/power_now") {
        $watts = &read_file("$batt_dir/power_now");
        $watts = sprintf "%.2f", $watts/1000000;
    } elsif(-e "$batt_dir/current_now") {
        $watts = &read_file("$batt_dir/current_now");
        $watts = sprintf "%.2f", $watts/100000;
    }
    return &json("watts", "$watts W");
}

sub network {
    return unless -x "/sbin/iwconfig";
    my ($device, $essid);
    my @iwconfig = split "\n\n", join "", `/sbin/iwconfig 2>/dev/null`;
    for(@iwconfig) {
        ($device, $essid) = /^([^ ]+).*ESSID:"([^"]*)"/;
    }
    return unless defined $device;
    return &json("network", "No wireless networks found", "ff2a2a") unless defined $essid;
    my $ifconfig = join "", `/bin/ifconfig $device`;
    (my $ip) = $ifconfig =~ /inet ([0-9.]*)/;
    return &json("network", "Connecting to $essid", "ff8000") if $ip eq "";
    return &json("network", $essid);
}

$| = 1;
print "{\"version\":1,\"click_events\":true}\n[\n";
#print "{\"version\":1}\n[\n";
my $pid = fork();
die "couldnt fork\n" unless defined $pid;
if($pid) {
    # parent
    close STDIN;
    while(++$count) {
        print "[", join(",", &network(), &weather(), &battery(), &watts(), &load(), &date()), "],\n";
        #print join(" | ", &weather, &load, &date), "\n";
        sleep 1;
    }
} else {
    # child
    close STDOUT;
    open my $log, ">$ENV{HOME}/.i3/i3status.log" or die "couldnt open log: $!\n";
    # autoflush the $log filehandle
    select((select($log), $|=1)[0]);
    while(my $line = <STDIN>) {
        if($line =~ /^,?{/) {
            $line =~ s/^,//;
            my $tree = decode_json $line;
            print $log "click event: name=$tree->{name}, button=$tree->{button}\n";
            my $command = $click_commands{$tree->{name}};
            if(defined $command) {
                print $log "executing command \"$command\"\n";
                system("$command &");
            }
        }
    }
}
