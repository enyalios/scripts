#!/usr/bin/perl
#
# this script both updates your list of all magic cards and searches thru it
# for specific cards.  
#
# to search: 
#   cardgrep [-n] <regex1> <regex2>...
#
# to update datafile: 
#   cardgrep -u
#
# the -n switch just prints out the card names without all their text.  useful
# for piping to cache-cards like this: 
#   cardgrep -n 'regex' | perl -pe 's/\n/\0/' | xargs -0 cache-cards -d

use strict;
use warnings;
use Getopt::Std;
use LWP::Simple;

# tweak this depending on where you want to store your data
my $data_file = "$ENV{HOME}/magic/oracle";
my $url = "https://magic.enyalios.net/search.cgi?output=text&q=....";


my %opts;
getopts('anuw', \%opts);
# a - show all fields
# n - output names only
# u - update card database
# w - disable line wrapping
my $num_cards = "0";

# this part is when you want to update the datafile
if($opts{u}) {
    print "updating card data...\n";
    getstore($url, $data_file)
        or die "Couldn't update card data: $!\n";
    exit;
}
 
# if there are no regexs as args use stdin as a list of card names
if(@ARGV == 0) {
    my @names = <STDIN>;
    chomp(@names);
    @names = map { "\Q$_\E" } @names;
    my $regex = "^name: *(" . join("|", @names) . ")\$";
    push @ARGV, $regex;
}

# make it read in 1 card at a time
$/ = "\n\n";
open INPUT, "<$data_file" or die "cant find input file\n";

CARD: while(<INPUT>) {

    # skip to the next card unless it agrees with all regexs
    # regexs that start with '!' are negated
    for my $arg (@ARGV) { 
        if ((my $regex = $arg) =~ s/^!//) {
            next CARD if /$regex/im;
        } else {
            next CARD unless /$regex/im; 
        }
    }

    $num_cards++;

    if($opts{n}) { 
        # then either print out the card name
        print "$1\n" if /^Name: +(.*)$/m;
    } else {
        # dont show some fields
        s/^(CMC|Color|CID|Date|Legality|Reserved|Timeshifted): .*\n//mg unless $opts{a};
        s/^(Name: .*\n)Name: .*\n/$1/mg unless $opts{a};

        # or print out the whole card, this craziness wraps the lines to 80 columns
        unless($opts{w}) {
            1 while s/^(?=.{81})(.{0,80})( +.*)/$1\n              $2/m
        }
        print;
    }
}

close INPUT;

# print out a count at the end (use stderr if we are just listing the names of
# the cards so that we play nice with cache-cards)
#print STDERR "\n" if $opts{n};
#print {$opts{n}?*STDERR:*STDOUT} scalar keys %cards, " card(s) returned\n\n";
print $num_cards, " card(s) returned\n\n" unless $opts{n};
