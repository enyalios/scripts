#!/usr/bin/perl
#
# this script both updates your list of all magic cards and searches thru it
# for specific cards.  
#
# to search: 
#   cardgrep [-n] <regex1> <regex2>...
#
# to update datafile: 
#   cardgrep -u
#
# the -n switch just prints out the card names without all their text.  useful
# for piping to cache-cards like this: 
#   cardgrep -n 'regex' | perl -pe 's/\n/\0/' | xargs -0 cache-cards -d

use strict;
use warnings;
use Getopt::Std;
use LWP::Simple;

# tweak this depending on where you want to store your data
my $data_file = "$ENV{HOME}/magic/oracle";
my $type_re = qr/\b(Land|Creature|Instant|Sorcery|Planeswalker|Enchantment|Artifact|Scheme|Plane|Vanguard|Conspiracy|Phenomenon)\b/;
my $url = "http://www.yawgatog.com/resources/oracle/";
my %rarities = (
    C => "Common",
    U => "Uncommon",
    R => "Rare",
    M => "Mythic Rare",
    L => "Land",
    S => "Special",
);
my %sets = (
    A     => "Limited Edition Alpha",
    B     => "Limited Edition Beta",
    U     => "Unlimited Edition",
    RV    => "Revised Edition",
    "4E"  => "Fourth Edition",
    "5E"  => "Fifth Edition",
    "6E"  => "Classic Sixth Edition",
    "7E"  => "Seventh Edition",
    "8ED" => "Eighth Edition",
    "9ED" => "Ninth Edition",
    "10E" => "Tenth Edition",
    M10   => "Magic 2010",
    M11   => "Magic 2011",
    M12   => "Magic 2012",
    M13   => "Magic 2013",
    M14   => "Magic 2014 Core Set",
    M15   => "Magic 2015 Core Set",

    AN    => "Arabian Nights",
    AQ    => "Antiquities",
    LE    => "Legends",
    DK    => "The Dark",
    FE    => "Fallen Empires",
    HL    => "Homelands",
    IA    => "Ice Age",
    AI    => "Alliances",
    CSP   => "Coldsnap",
    MI    => "Mirage",
    VI    => "Visions",
    WL    => "Weatherlight",
    TE    => "Tempest",
    ST    => "Stronghold",
    EX    => "Exodus",
    US    => "Urza's Saga",
    UL    => "Urza's Legacy",
    UD    => "Urza's Destiny",
    MM    => "Mercadian Masques",
    NE    => "Nemesis",
    PR    => "Prophecy",
    IN    => "Invasion",
    PS    => "Planeshift",
    AP    => "Apocalypse",
    OD    => "Odyssey",
    TOR   => "Torment",
    JUD   => "Judgment",
    ONS   => "Onslaught",
    LGN   => "Legions",
    SCG   => "Scourge",
    MRD   => "Mirrodin",
    DST   => "Darksteel",
    "5DN" => "Fifth Dawn",
    CHK   => "Champions of Kamigawa",
    BOK   => "Betrayers of Kamigawa",
    SOK   => "Saviors of Kamigawa",
    RAV   => "Ravnica: City of Guilds",
    GPT   => "Guildpact",
    DIS   => "Dissension",
    TSP   => "Time Spiral",
    PLC   => "Planar Chaos",
    FUT   => "Future Sight",
    LRW   => "Lorwyn",
    MOR   => "Morningtide",
    SHM   => "Shadowmoor",
    EVE   => "Eventide",
    ALA   => "Shards of Alara",
    CON   => "Conflux",
    ARB   => "Alara Reborn",
    ZEN   => "Zendikar",
    WWK   => "Worldwake",
    ROE   => "Rise of the Eldrazi",
    SOM   => "Scars of Mirrodin",
    MBS   => "Mirrodin Besieged",
    NPH   => "New Phyrexia",
    ISD   => "Innistrad",
    DKA   => "Dark Ascension",
    AVR   => "Avacyn Restored",
    RTR   => "Return to Ravnica",
    GTC   => "Gatecrash",
    DGM   => "Dragon's Maze",
    THS   => "Theros",
    BNG   => "Born of the Gods",
    JOU   => "Journey into Nyx",
    KTK   => "Khans of Tarkir",

    P1    => "Portal",
    P2    => "Portal Second Age",
    P3K   => "Portal Three Kingdoms",
    S99   => "Starter 1999",
    S00   => "Starter 2000",
    HOP   => "Planechase",
    PC2   => "Planechase 2012 Edition",
    CMD   => "Commander",
    C13   => "Commander 2013 Edition",
    C14   => "Commander 2014",
    CNS   => "Conspiracy",
    CH    => "Chronicles",
    ARC   => "Archenemy",
    PROMO => "Promo set for Gatherer",
);

# make it read in 1 card at a time
my %opts;
getopts('nu', \%opts);
my $num_cards = "0";

# this part is when you want to update the datafile
if($opts{u}) {
    print "updating card data...\n";

    my $all_sets_url = get $url;
    $all_sets_url = $1 if $all_sets_url =~ /<a href="(.*?)">all sets/i;
    my $cards = `wget -qO - "$url$all_sets_url" | funzip`;
    open OUTPUT, ">$data_file" or die "cant open output file '$data_file': $!\n";
    # split whenever you have 2 blank lines before either a line with a character or the end of the string
    for(split /\n\n(?:(?=.)|$)/, $cards) {
        #print "<<$_>>\n\n";
        # the negative one tells it not to ignore empty fields
        my @fields = split /\n/, $_, -1;
        my $name = shift @fields;
        my ($type, $cost, $sets, $size, $loyal);
        if($fields[0] =~ /$type_re/) {
            $type = shift @fields;
        } elsif($fields[1] =~ /$type_re/) {
            $cost = shift @fields;
            $type = shift @fields;
        } else {
            print "Can't find a card type for '$name'.\n";
        }
        $size = shift @fields if $type =~ /Creature/;
        $loyal = shift @fields if $type =~ /Planeswalker/;
        $sets = pop @fields;
        if(defined $sets) {
            $sets = join ", ", map { &translate_set($_) } split ", ", $sets;
        }

        print OUTPUT "Name:        $name\n";
        print OUTPUT "Cost:        $cost\n" if defined $cost;
        print OUTPUT "Type:        $type\n";
        print OUTPUT "Pow/Tgh:     $size\n" if defined $size;
        print OUTPUT "Loyalty:     $loyal\n" if defined $loyal;
        print OUTPUT "Rules Text:  ", join "\n             ", @fields;
        print OUTPUT "\n";
        print OUTPUT "Set/Rarity:  $sets\n" if defined $sets;
        print OUTPUT "\n";
    }

    # and then save it permanently to the data file
    close OUTPUT;

    exit;
}
 
# if there are no regexs as args use stdin as a list of card names
if(@ARGV == 0) {
    my @names = <STDIN>;
    chomp(@names);
    @names = map { "\Q$_\E" } @names;
    my $regex = "^name: *(" . join("|", @names) . ")\$";
    push @ARGV, $regex;
}

$/ = "\n\n";
open INPUT, "<$data_file" or die "cant find input file\n";

CARD: while(<INPUT>) {

    # skip to the next card unless it agrees with all regexs
    # regexs that start with '!' are negated
    for my $arg (@ARGV) { 
        if ((my $regex = $arg) =~ s/^!//) {
            next CARD if /$regex/im;
        } else {
            next CARD unless /$regex/im; 
        }
    }

    $num_cards++;

    if($opts{n}) { 
        # then either print out the card name
        print "$1\n" if /^Name: +(.*)$/m;
    } else {
        # or print out the whole card, this craziness wraps the lines to 80 columns
        1 while s/^(?=.{81})(.{0,80})( +.*)/$1\n              $2/m;
        print;
    }
}

close INPUT;

# print out a count at the end (use stderr if we are just listing the names of
# the cards so that we play nice with cache-cards)
#print STDERR "\n" if $opts{n};
#print {$opts{n}?*STDERR:*STDOUT} scalar keys %cards, " card(s) returned\n\n";
print $num_cards, " card(s) returned\n\n" unless $opts{n};

sub translate_set {
    my ($set, $rarity) = split "-", $_[0];
    print "Can't find a rarity for '$rarity'.\n" unless defined $rarities{$rarity};
    $rarity = $rarities{$rarity} if defined $rarities{$rarity};
    print "Can't find a set for '$set'.\n" unless defined $sets{$set};
    $set = $sets{$set} if defined $sets{$set};
    return "$set $rarity";
}
