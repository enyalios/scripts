#!/usr/bin/perl

use strict;
use warnings;
use POSIX "strftime";
use Date::Parse; # from dev-perl/TimeDate
use File::Find;
use List::Util "shuffle";
use Time::HiRes "time";
use Term::ReadKey;

my $volume_file = "/proc/acpi/ibm/volume";
my $music_dir = "$ENV{HOME}/media/music/Daft\ Punk\ -\ Discovery";
$| = 1;
$SIG{INT} = sub { fix_term() && exit };
END { fix_term() }

print "\e[?25l"; # make the cursor disappear

my $end = $ARGV[0];
if(!defined $end) {
    ReadMode "cbreak";
    my $t = time;
    my $key = "";
    my $paused = 0;
    while(1) {
        if($paused) {
            print_time($t, $paused);
        } else {
            print_time(time-$t, $paused);
        }
        $key = ReadKey(1) // "";
        if($key eq " ") {
            # while paused, $t holds the duration so far
            # while unpaused, $t holds the start time
            $paused = !$paused;
            $t = time-$t;
        }
    }
}
if($end =~ /^\d+$/) {
    $end = strftime("%s", localtime()) + $end*60;
} else {
    $end = str2time($end);
    $end += 24*60*60 if $end < now();
}
# use this if we want our laptop to wake up from sleep or hibernate
#system("sudo rtcwake --mode no --time $end");

while(1) {
    my $diff = $end - now();
    print_time($diff);
    last if $diff <= 0;
    sleep 1;
}

print "\nbuzz, buzz!\n";
set_volume_and_unmute();
play_music();

sub now { strftime("%s", localtime()); }

sub fix_term { print "\e[?25h"; } # make the cursor come back

sub seconds_to_hms {
    my $input = $_[0];
    my $hours = int($input / 60 / 60);
    my $minutes =  int($input / 60) % 60;
    my $seconds = $input % 60;

    my $hms = sprintf "%02d:%02d:%02d", $hours, $minutes, $seconds;
    return $hms;
}

sub play_music {
    my @files;
    find( sub { push @files, $File::Find::name if -f }, $music_dir );
    system "mplayer", shuffle @files;
}

sub set_volume_and_unmute { 
    system "amixer set PCM 60% > /dev/null";
    system "echo unmute > /proc/acpi/ibm/volume"
    #volume_cmd("level 14\n");
    #volume_cmd("up\n") while is_muted();
}

sub is_muted {
    open my $fh, "<$volume_file" or die "couldnt open volume file\n";
    my @lines = <$fh>;
    close $fh;
    return 1 if grep /^mute:.*on/, @lines;
    return 0;
}

sub volume_cmd {
    open my $fh, ">$volume_file" or die "couldnt open volume file\n";
    print $fh @_;
    close $fh;
}

sub char_to_array {
    my %char = (
        0 => [
            "  .####.  ",
            " ##    ## ",
            "##      ##",
            "#'  db  '#",
            "#   ##   #",
            "#.  9P  .#",
            "##      ##",
            " ##    ## ",
            "  '####'  ",
        ],
        1 => [
            "     #|   ",
            "    ##|   ",
            "   #'#|   ",
            "  ' |#|   ",
            "    |#|   ",
            "    |#|   ",
            "    |#|   ",
            "   .|#|.  ",
            "  ####### ",
        ],
        2 => [
            "  .####.  ",
            " ##    ##.",
            " #     ##'",
            "      ##  ",
            "     ##   ",
            "   .#'    ",
            "  .#'     ",
            " ##     ..",
            "##########",
        ],
        3 => [
            " .######. ",
            "##    '##.",
            "        ##",
            "       .#'",
            "    ####< ",
            "       '#.",
            "        ##",
            "##    .##'",
            " '#####'  ",
        ],
        4 => [
            "       ## ",
            "     .### ",
            "    a#'## ",
            "   ##' ## ",
            "  ##   ## ",
            ".#'    ## ",
            "##########",
            "       ## ",
            "       ## ",
        ],
        5 => [
            " #########",
            ".#'     ' ",
            "a#        ",
            "##.####.  ",
            "#'    '## ",
            "        ##",
            "        ##",
            " #.   .## ",
            " '#####'  ",
        ],
        6 => [
            "  .####a  ",
            " ##    '# ",
            "##        ",
            "##        ",
            "##.#####. ",
            "##'    '#a",
            "##      ##",
            "'#.    a##",
            "  '#####' ",
        ],
        7 => [
            "##########",
            "#'     ## ",
            "      ##  ",
            "     ##   ",
            "  ######  ",
            "   ##     ",
            "  ##      ",
            " ##       ",
            "##        ",
        ],
        8 => [
            " .######. ",
            "##'    '##",
            "##      ##",
            "'#.    .#'",
            " >######< ",
            ".#'    '#.",
            "##      ##",
            "##.    .##",
            " '######' ",
        ],
        9 => [
            " .######. ",
            "a#     '#a",
            "##      ##",
            " ##.    #'",
            "  '###### ",
            "      ##  ",
            "     ##   ",
            "   ##     ",
            " ##       ",
        ],
        ":" => [
            "    ",
            "    ",
            " mm ",
            " ## ",
            "    ",
            " mm ",
            " ## ",
            "    ",
            "    ",
        ],
        " " => [
            "    ",
            "    ",
            "    ",
            "    ",
            "    ",
            "    ",
            "    ",
            "    ",
            "    ",
        ],
    );
    return $char{$_[0]} if exists $char{$_[0]};
}

sub print_arrays {
    my @refs = @_;
    my @output;
    my $line = 0;
    while(defined $refs[0]->[$line]) {
        $output[$line] .= " " . $_->[$line] for @refs;
        $line++;
    }
    print "\033[2J";   # clear the screen
    print "\033[0;0H"; # jump to 0,0
    print "\n", join("\n", @output), "\n\n";
}

sub string_to_arrays {
    return map { char_to_array($_) } split //, $_[0];
}

sub print_time {
    print_arrays(string_to_arrays(seconds_to_hms($_[0])));
    print "                                   Paused" if $_[1];
}
