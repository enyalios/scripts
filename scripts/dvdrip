#!/usr/bin/perl
#
# $HeadURL$
# $LastChangedRevision$

use warnings;
use strict;
use Getopt::Long;

# declaring variables and setting up the defaults
$main::VERSION  = "0.30";
$ENV{MPLAYER_VERBOSE} = "-2";
$SIG{CHLD} = 'IGNORE';

my $pid         = $$;
my $bail        = 0;
my @aid         = ();
my $bitrate     = "";
my $crop        = "";
my $size        = "";
my @dvd_device  = ();
my @sid         = ();
my $outfile     = "movie-$$.mkv";
my $deint       = "";
my $pretend     = "";
my $noise       = "";
my $width       = "640";
my $keep        = "0";
my @infiles     = ();
my $temp_dir    = ".";

# this is a nice usage message that will get printed if anything goes wrong
sub print_help {
    print <<EOF;
    
Usage:
  dvdrip [options] infile ...

Options:
  --aid         -a <n>            aid number
  --bitrate     -b <n>            bitrate in kbits
  --crop        -c [<n:n:n:n>]    crop region (omit region to auto-detect)
  --dvd-device  -d <path>         dvd device
  --keep        -k                do not delete temp files when done
  --deinterlace -l                deinterlace video stream
  --denoise     -n                denoise video stream
  --outfile     -o <file>         write movie to <file> (movie-\$pid.mkv)
  --pretend     -p                print out commands, but do not run them
  --size        -s <n>            target filesize in mbs
  --sid         -u <n>            subtitle id number
  --width       -w <n>            video width (default: 640)

  Short options may be bundled.
  The '-i' and '-t' options are deprecated.
  Specify dvd tracks as dvd://<n>.

EOF
    exit 1;
}

sub parse_args {
    Getopt::Long::Configure qw(bundling pass_through);
    GetOptions(
        'aid|a=i'        => sub { @aid = ("-aid", $_[1]) },
        'bitrate|b=i'    => \$bitrate,
        'crop|c'         => sub { $crop =
            ($ARGV[0] =~ /^\d+:\d+:\d+:\d+$/)?shift @ARGV:"auto" },
        'dvd-device|d=s' => sub { @dvd_device = ("-dvd-device", $_[1]) },
        'help|h'         => sub { print_help() },
        'keep|k'         => \$keep,
        'deinterlace|l'  => sub { $deint = "lacvdeint," },
        'denoise|n'      => sub { $noise = "hqdn3d," },
        'outfile|o=s'    => \$outfile,
        'pretend|p'      => \$pretend,
        'size|s=i'       => \$size,
        'sid|u=i'        => sub { @sid = ("-sid", $_[1]) },
        'width|w=i'      => sub { $width = 16 * int(($_[1] + 8)/16) },
        '<>'             => sub { unless($_[0] =~ m#^dvd://\d+$# || -r $_[0]) {
                                  print "Input file '$_[0]' is not a valid ", 
                                  "dvd track or readable input file.\n";
                                  $bail++; }
                                  push @infiles, $_[0]; }
    );
    
    if($size && $bitrate)   { print "You cannot specify both a bitrate and a filesize.\n"; print_help(); }
    if(!$size && !$bitrate) { print "You must specify either a bitrate or a filesize.\n";  print_help(); }
    unless(@infiles)        { print "You must specify at least one input file.\n";         print_help(); }
    print_help() if $bail;
    
    get_crop();

    print "# infiles     = @infiles\n";
    print "# outfile     = $outfile\n";
    print "# bitrate     = $bitrate\n" if $bitrate;
    print "# size        = $size\n" if $size;
    print "# width       = $width\n";
    print "# crop        = $crop\n" if $crop;
    print "# dvd-device  = $dvd_device[1]\n" if @dvd_device;
    print "# aid         = $aid[1]\n" if @aid;
    print "# sid         = $sid[1]\n" if @sid;
    print "# deinterlacing\n" if $deint;
    print "# denoising\n" if $noise;
    print "# keeping temp files\n" if $keep;
    print "# pretend rip\n" if $pretend;
    print "\n";

    if(!$pretend) {
        local $| = 1; #autoflush on for this block
        print "encoding in... ";
        for (reverse 1 .. 5) {
            print "$_ ";
            sleep(1);
        }
        print "\n\n";
    }
}

# a nice function to either run or simply print system calls.  here we print
# for pretends or if we are supposed to actually run the command, we fork,
# exec, and then wait for the child to finish.  this gives us more flexibility
# than just running 'system' but serves essentially the same purpose.  in this
# case, it allows us to close stderr on mplayer and mencoder commands while
# avoiding using the shell so we arent susceptible to weird chars in filenames.
sub my_system {
    if($pretend) {
        print "@_\n";
    } else {
        my $child;
        unless($child = fork) {
            # we are the child, run the command
            close STDERR if $_[0] =~ /mplayer|mencoder/;
            exec @_;
            #if($? == -1) {
            #    die "Failed to execute command: @_\n";
            #} elsif($? >> 8 != 0) {
            #    die "Command returned with error code: ", $? >> 8, ": @_\n";
            #}
        } else {
            # we are the parent, just sit and wait for our kid to return
            waitpid($child, 0);
        }
    }
}

# this part is sorta crazy.  we want to auto-detect the crop region so we spawn
# mplayer telling it to cropdetect, but to step thru the video 60 seconds at a
# time but only do a max of 60 frames.  we also tell it not to show audio or
# video here since this is just a command line script.  finally we grap the
# 'crop=...' part from the last line that starts with 'crop area:' since this
# is the region that mplayer decided is best.
sub get_crop {
    if($crop eq "auto") {
        print "### Calculating crop region...\n";
        open CROP, '-|', "mplayer", @dvd_device, @infiles, 
            qw(-vo null -ao null -vf cropdetect=50:4 -sstep 60 -frames 60);
        $_ = (<CROP>)[-1];
        $crop = (/-vf (crop=[\d:]+)/)[0];
        die "Could not auto-detect crop region\n" unless $crop;
        $crop .= ","
    } elsif($crop) {
        $crop = "crop=$crop,";
    }
}

sub audio_pass {
    print "### Encoding audio...\n";
    # we pass the audio data thru a fifo since mplayer cant encode oggs nativly
    my_system("mkfifo", "$temp_dir/pipe-$$");
    if(!fork) {
        my_system(qw(oggenc -b 96 -o), "$temp_dir/audio-$pid.ogg", 
            "$temp_dir/pipe-$pid");
        exit;
    }
    my_system(qw"mplayer -vo null -vc dummy -ao", "pcm:file=$temp_dir/pipe-$$",
        @infiles, @aid, @dvd_device);

    # give oggenc some time to finish encoding whats left in the pipe, since
    # mplayer will return before oggenc is done
    sleep 1 unless $pretend;

    # here we have to calculate the video bitrate if they just gave us a
    # target file size.  first we find the length and size of the audio track.
    # then we find out how much space we have left after subtracting the audio
    # size and container overhead from the target file size.  this crazy
    # calculation gives us our needed bitrate which we then round down to an
    # integer so mencoder doesnt barf.
    if(!$bitrate) {
        if($pretend) {
            # some crazy commands to dynamically determine the video bitrate
            # if we are doing a 'pretend'
            print "\n### Determining video bitrate...\n";
            print "video_bitrate=\$(echo \"($size*1024*1024*.995 - \$(ls -l ", 
            "$temp_dir/audio-$$.ogg | awk '{print \$5}')) / \$(mplayer -frames ", 
            "0 -identify -vo null -ao null $temp_dir/audio-$$.ogg 2>/dev/null ",
            "| sed -ne 's/^ID_LENGTH=//p') / 1000 * 8\" | bc -l | sed -e ", 
            "'s/\\..*//')\n";
            $bitrate = "\${video_bitrate}" unless $bitrate;
        } else {
            open INDENT, "-|", qw(mplayer -v -frames 0 -identify -vo null -ao null), 
                "$temp_dir/audio-$$.ogg";
            my $alength = (grep { /^ID_LENGTH=[\d.]+$/ } (<INDENT>))[0];
            $alength =~ s/^ID_LENGTH=([\d.]+)$/$1/;
            chomp $alength;
            my $asize = -s "$temp_dir/audio-$$.ogg";
            die "Improper audio length: $alength seconds\n" unless $alength > 0;
            die "Improper audio size: $asize bytes\n" unless $asize > 0;
            $bitrate = int(($size*1024*1024*.995 - $asize)/$alength/1000*8);
            print  "\n";
            printf "# alength     = %.2f seconds\n", $alength;
            printf "# asize       = %.2f mb\n", $asize/1024/1024;
            print  "# bitrate     = $bitrate kbit\n";
        }
    }
}

# this is the first video pass command,  most of this stuff can be found in the
# mencoder man page but ill go thru some of it anyways.  we copy the audio from
# the input file even tho we already made the ogg stream so that mencoder can
# make sure the audio and video stay in sync by duping and dropping frames as
# appropriate.  the '-msglevel' thing just makes the progress info show up even
# when make all the rest of the output quiet.  we can write the output to
# /dev/null since this pass is just to write out passlogfile.  for the
# x264encopts, we tell it this is pass 1, the bitrate, and to skip really cpu
# intensive calcs since we are only generating a logfile.  the video filters
# the we apply obviously deinterlace, denoise, and scale,  the weird scaling
# stuff tells it to scale to the specified width and whatever height to
# maintain the aspect ratio but to round the height to the nearest multiple of
# 16 since that makes the video codec happy.
sub video1_pass {
    print "\n### Encoding first pass...\n";
    my_system(qw(mencoder -oac copy -ovc x264 -zoom -msglevel avsync=5), 
        @infiles, "-passlogfile", "$temp_dir/divx2pass-$$.log", "-o", 
        "/dev/null", "-x264encopts", "pass=1:bitrate=${bitrate}:turbo=1", 
        "-vf", "${deint}${crop}${noise}scale=$width:-10", @dvd_device, 
        @sid);
}

# this is all basically the exact same thing as the first video pass except we
# actually write out a file instead of just generating a log and we skip the
# turbo option because of this.
sub video2_pass {
    print "\n### Encoding second pass...\n";
    my_system(qw(mencoder -oac copy -ovc x264 -zoom -msglevel avsync=5),
        @infiles, "-passlogfile", "$temp_dir/divx2pass-$$.log", "-o",
        "$temp_dir/video-$$.avi", "-x264encopts", "pass=2:bitrate=${bitrate}", 
        "-vf", "${deint}${crop}${noise}scale=$width:-10", @dvd_device,
        @sid);
}

# here we are mixing the audio stream from the ogg file with the video stream
# from the avi file we made.  the '-A' option tells mkvmerge to not use the
# audio stream from the avi file (we don't want this since this was just to
# allow mplayer to keep the audio and video in sync).  the default-language
# option is just so that it knows the audio is english.
sub mux_pass {
    print "\n### Muxing audio and video...\n";
    my_system(qw(mkvmerge --engage allow_avc_in_vfw_mode --default-language 
        eng -o), "$outfile", "-A", "$temp_dir/video-$$.avi", 
        "$temp_dir/audio-$$.ogg");
}

# remove the temp files unless the user told us not to or unless the final 
# file size is off by more than 2 percent
sub rm_tmp {
    return if $pretend;
    if($size) {
        my $final_size = -s $outfile;
        my $diff = ($final_size/1024/1024 - $size) / $size * 100;
        print "\n";
        printf "# target size = %.1f mb\n", $size;
        printf "# actual size = %.1f mb\n", $final_size/1024/1024;
        if($diff >= 2 || $diff <= -2) {
            print "Final file size off by more than 2%, keeping temp files\n";
            $keep = 1;
        }
    }
    unless($keep) { 
        unlink "$temp_dir/pipe-$$", "$temp_dir/audio-$$.ogg", 
        "$temp_dir/divx2pass-$$.log", "$temp_dir/video-$$.avi";
    }
}

parse_args();
audio_pass();
video1_pass();
video2_pass();
mux_pass();
rm_tmp();

=for comment
    
TODO:

do some testing on the new deinterlacing method
    maybe use "pullup,softskip," with "-ofps 24000/1001"
do error checking on return status of system calls
think about making the pretend output guaranteed correct
dvds come out small.  their video streams are too small by a factor of 24/30.
    probably has something to do with frame rates.  fix this.
