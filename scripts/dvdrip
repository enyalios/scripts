#!/usr/bin/perl

use warnings;
use strict;
use Getopt::Std;

# declaring variables and setting up the defaults
$Getopt::Std::STANDARD_HELP_VERSION = 1;
$main::VERSION  = "0.01";
$ENV{MPLAYER_VERBOSE} = "-2";
my %opts;
my $title       = "1";
my $aid         = "-aid 128";
my $bitrate     = "";
my $crop        = "";
my $size        = "";
my $dvd_device  = "";
my $sid         = "";
my $outfile     = "movie-$$.avi";
my $infile      = "dvd://${title}";
my $deint       = "";
my $noise       = "";
my $width       = "640";

# useful help message
sub HELP_MESSAGE {
    print <<EOF;

Usage:
    $0 [options]

Options:
    -a n            aid number (default: 128)
    -b n            bitrate in kbits
    -c              crop borders (region is auto-detected)
    -d path         dvd device (default: /dev/dvd)
    -h              this help message
    -i file         input file (defaults to dvd)
    -l              deinterlace video
    -n              denoise video
    -o file         write movie to <file> (default: movie-<pid>.mkv)
    -p              pretend (print out commands, but do not run them)
    -s n            target filesize in megabytes
    -S n            subtitle id number
    -t n            dvd title number (default: 1)
    -w n            video width (default: 640)
   
EOF

    exit 1;
}

# a nice function to either run or simply print system calls
sub my_system {
    $_[0] =~ s/[\n ]+/ /gm;
    $opts{p} ? print "$_[0]\n" : system $_[0];
}

# parse our arguments to set up variables and bail if necessary
sub parse_args {
    getopts('a:b:cd:hi:lno:ps:S:t:w:e:', \%opts);
    HELP_MESSAGE() if $opts{h};
    $bitrate = $opts{b} if $opts{b};
    $size = $opts{s} if $opts{s};
    unless($bitrate || $size) {
        print "You must specify either a bitrate or a filesize.\n";
        HELP_MESSAGE();
    }
    if($bitrate && $size) {
        print "You cannot specify both a bitrate and a filesize.\n";
        HELP_MESSAGE();
    }
    $aid = "-aid $opts{a}" if $opts{a};
    $dvd_device = "-dvd-device $opts{d}" if $opts{d};
    ($infile = "\"$opts{i}\"", $aid = "") if $opts{i};
    $deint = "lavcdeint," if $opts{l};
    $noise = ":nr=200" if $opts{n}; # i should play with this number
    $outfile = $opts{o} if $opts{o};
    $sid = "-sid $opts{S}" if $opts{S};
    $infile = "dvd://$opts{t}" if $opts{t};
    
    # this rounds the width the user gives us to the nearest multiple of
    # 16 since video codecs are much more efficient if this is the case
    $width = $opts{w} if $opts{w};
    $width = 16 * int(($width + 8)/16);
    
    # this part is sorta crazy.  we want to auto-detect the crop region so
    # we spawn mplayer telling it to cropdetect, but to step thru the video
    # 100 frames at a time but only do a max of 200 frames.  we also tell 
    # it not to show audio or video here since this is just a command line
    # script.  finally we grap the 'crop=...' part from the last line that
    # starts with 'crop area:' since this is the region that mplayer decided
    # is best.
    if($opts{c}) {
        print "### Calculating crop region...\n" unless $opts{p};
        $_ = (grep { /^crop area:/ } `mplayer $dvd_device $infile -vo null \\
            -ao null -vf cropdetect -sstep 100 -frames 200 2>/dev/null`)[-1];
        $crop = (/-vf (crop=[\d:]+)/)[0] . ",";
    }
}

sub audio_pass {
    print "### Encoding audio...\n";
    # we pass the audio data thru a fifo since mplayer cant encode oggs nativly
    my_system("mkfifo pipe-$$");
    my_system("oggenc -o audio-$$.ogg -b 96 pipe-$$ & mplayer -vo null -vc 
        dummy -ao pcm:file=pipe-$$ $infile $aid $dvd_device 2>/dev/null");

    # here we have to calculate the video bitrate if they just gave us a
    # target file size.  first we find the length and size of the audio track.
    # then we find out how much space we have left after subtracting the audio
    # size and container overhead from the target file size.  this crazy
    # calculation gives us or needed bitrate which we then round down to an
    # integer so mencoder doesnt barf.
    if(!$bitrate) {
        if($opts{p}) {
            # some crazy commands to dynamically determine the video bitrate
            # if we are doing a 'pretend'
            print "\n### Determining video bitrate...\n";
            print "video_bitrate=\$(echo \"($size*1024*1024*.995 - \$(ls -l ", 
            "audio-$$.ogg | awk '{print \$5}')) / \$(mplayer -frames 0 ", 
            "-identify -vo null -ao null audio-$$.ogg 2>/dev/null | sed -ne ", 
            "'s/^ID_LENGTH=//p') / 1000 * 8\" | bc -l | sed -e 's/\\..*//')\n";
            $bitrate = "\${video_bitrate}" unless $bitrate;
        } else {
            my $alength = (map { (/^ID_LENGTH=([\d.]+)$/)[0] } 
                `mplayer -v -frames 0 -identify -vo null -ao null \\
                    audio-$$.ogg 2>/dev/null`)[0];
            my $asize = -s "audio-$$.ogg";
            $bitrate = int(($size*1024*1024*.995 - $asize)/$alength/1000*8);
        }
    }
}

sub video1_pass {
    print "\n### Encoding first pass...\n";
    my_system("mencoder $infile -o /dev/null -passlogfile divx2pass-$$.log -oac 
        copy -ovc x264 -x264encopts pass=1:bitrate=${bitrate}${noise}:turbo=1 
        -vf ${deint}${crop}scale=$width:-10 -zoom $dvd_device $sid -msglevel 
        avsync=5 2>/dev/null");
}

sub video2_pass {
    print "\n### Encoding second pass...\n";
    my_system("mencoder $infile -o video-$$.avi -passlogfile divx2pass-$$.log 
        -oac copy -ovc x264 -x264encopts pass=2:bitrate=${bitrate}${noise} 
        -vf ${deint}${crop}scale=$width:-10 -zoom $dvd_device $sid -msglevel 
        avsync=5 2>/dev/null");
}

sub mux_pass {
    print "\n### Muxing audio and video...\n";
    my_system("mkvmerge --engage allow_avc_in_vfw_mode --default-language 
        eng -o $outfile -A video-$$.avi audio-$$.ogg");
}

parse_args();
audio_pass();
video1_pass();
video2_pass();
mux_pass();
