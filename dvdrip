#!/usr/bin/perl
#
# $HeadURL$
# $LastChangedRevision$
#
# this is an awesome script for turning any video files into mkv files with
# h.264 video and ogg vorbis audio.  its quite flexible so run 'dvdrip -h' to
# see all of the options.

use warnings;
use strict;
use Getopt::Long;

# declaring variables and setting up the defaults
$main::VERSION  = "0.38";
$ENV{MPLAYER_VERBOSE} = "-2";

my $pid         = $$;
my @aid         = ();
my $bitrate     = "";
my $crop        = "";
my $size        = "";
my @dvd_device  = ();
my @sid         = ("-forcedsubsonly");
my $outfile     = "movie-$pid.mkv";
my $deint       = "";
my $pretend     = "";
my $noise       = "";
my $width       = "640";
my $height      = "";
my $keep        = "0";
my @infiles     = ();
my $temp_dir    = ".";
my @fps         = ();
my @chapters    = ();
my @opts        = ();
my @oggs        = ();
my $copy        = 0;
my $ffmpeg      = 0;
my $dumpfile    = "";
my $quality     = "";

# this is a nice usage message that will get printed if anything goes wrong
sub print_help {
    print <<EOF;
    
Usage:
  dvdrip [options] infile ...

Options:
  --aid         -a <n>[,<n>]+     aid number (default: 128)
  --bitrate     -b <n>            bitrate in kbits
  --chapters    -r [<file>]       use chapter info (omit file to auto-detect)
  --copy        -y                make a copy of the dvd before ripping
  --crop        -c [<n:n:n:n>]    crop region (omit region to auto-detect)
  --deinterlace -l                deinterlace video stream
  --denoise     -n                denoise video stream
  --dvd-device  -d <path>         dvd device
  --ffmpeg      -f                use ffmpeg instead of mencoder
  --keep        -k                do not delete temp files when done
  --outfile     -o <file>         write movie to <file> (movie-\$pid.mkv)
  --pretend     -p                print out commands, but do not run them
  --quality     -q <n>            x264 quality (0 - 51)
  --sid         -u <n>            subtitle id number
  --size        -s <n>            target filesize in mbs
  --width       -w <n>            video width (default: 640)
  --                              end dvdrip options--remaining args to mplayer

  Short options may be bundled and long options abbreviated.
  The '-i' and '-t' options are deprecated.
  Specify dvd tracks as dvd://<n>.

EOF
    exit 1;
}

sub parse_args {
    my $bail = 0;
    Getopt::Long::Configure qw(bundling pass_through);
    GetOptions(
        'aid|a=s'        => sub { @aid = (map { ["-aid",$_] } split /,/,$_[1]) },
        'bitrate|b=i'    => \$bitrate,
        'crop|c'         => sub { $crop =
            (@ARGV && $ARGV[0] =~ /^\d+:\d+:\d+:\d+$/)?shift @ARGV:"autodetect" },
        'chapters|r'     => sub { @chapters = ("--chapters",
                                (@ARGV && -r $ARGV[0]?shift @ARGV:"")) },
        'dvd-device|d=s' => sub { @dvd_device = ("-dvd-device", $_[1]) },
        'ffmpeg|f'       => \$ffmpeg,
        'help|h'         => sub { print_help() },
        'keep|k'         => \$keep,
        'deinterlace|l'  => sub { $deint = "yadif,"; 
                                  @fps = qw(-ofps 24000/1001); },
        'denoise|n'      => sub { $noise = "hqdn3d," },
        'outfile|o=s'    => \$outfile,
        'pretend|p'      => \$pretend,
        'size|s=i'       => \$size,
        'sid|u=i'        => sub { @sid = ("-sid", $_[1]) },
        'width|w=i'      => sub { $width = 16 * int(($_[1] + 8)/16) },
        'copy|y'         => \$copy,
        'quality|q=i'    => \$quality,
        '<>'             => sub { unless($_[0] =~ m#^dvd://\d+$# || -r $_[0]) {
                                      print "Input file '$_[0]' is not a valid ", 
                                      "dvd track or readable input file.\n";
                                      $bail++; }
                                      #@fps = qw(-ofps 24000/1001) 
                                      #if $_[0] =~ m#^dvd://\d+$#;
                                  if($_[0] =~ m#^dvd://\d+$# && @dvd_device == 0) {
                                      @dvd_device = ("-dvd-device", "/dev/dvd");
                                  }
                                  push @infiles, $_[0]; }
    );
    
    if($size && $bitrate)    { print "You cannot specify both a bitrate and a filesize.\n"; print_help(); }
    if($size && $quality)    { print "You cannot specify both a filesize and a quality.\n"; print_help(); }
    if($bitrate && $quality) { print "You cannot specify both a bitrate and a quality.\n";  print_help(); }
    if(!$ffmpeg && $quality) { print "You cannot use quality without the ffmpeg option.\n"; print_help(); }
    if(!$size && !$bitrate && !$quality) { print "You must specify either a bitrate, a filesize, or a quality.\n";  print_help(); }
    unless(@infiles)         { print "You must specify at least one input file.\n";         print_help(); }
    if(@chapters && !$chapters[1] && $infiles[0] !~ m#^dvd://\d+$#) 
    { print "You can only get chapters automatically from DVDs.\n"; print_help(); }
    if($copy && $infiles[0] !~ m#dvd://\d+$#)
    { print "You can only use the --copy option when the input is a DVD.\n"; print_help(); }
    print_help() if $bail;

    #get leftover options to pass to mplayer/mencoder
    if (@ARGV) {
        @opts = @ARGV;
        shift @opts;
    }

    print "# infiles      = @infiles\n";
    print "# outfile      = $outfile\n";
    print "# bitrate      = $bitrate\n" if $bitrate;
    print "# size         = $size\n" if $size;
    print "# width        = $width\n";
    print "# crop         = $crop\n" if $crop;
    print "# dvd-device   = $dvd_device[1]\n" if @dvd_device;
    print "# aid          = ",(join ",",map { $_->[1] } @aid),"\n" if (@aid);
    print "# sid          = $sid[1]\n" if $sid[0] eq "-sid";
    print "# chapter-file = ", $chapters[1] || "grab from dvd", "\n" if @chapters;
    if (@opts) {
        print "# mplayer opts = ",(join " ",@opts),"\n";
    }
    print "# deinterlacing\n" if $deint;
    print "# denoising\n" if $noise;
    print "# keeping temp files\n" if $keep;
    print "# pretend rip\n" if $pretend;
    print "\n";

    if (@aid == 0) { @aid = ([]); }

    if(!$pretend) {
        local $| = 1; #autoflush on for this block
        print "encoding in... ";
        for (reverse 1 .. 5) {
            print "$_ ";
            sleep(1);
        }
        print "\n\n";
    }
}

# a nice function to either run or simply print system calls.  here we print
# for pretends or if we are supposed to actually run the command, we fork,
# exec, and then wait for the child to finish.  this gives us more flexibility
# than just running 'system' but serves essentially the same purpose.  in this
# case, it allows us to close stderr on mplayer and mencoder commands while
# avoiding using the shell so we arent susceptible to weird chars in filenames.
sub my_system {
    if($pretend) {
        print "@_\n";
    } else {
        find_program($_[0]);
        my $child;
        unless($child = fork) {
            # we are the child, run the command
            close STDERR if $_[0] =~ /mplayer|mencoder/;
            exec @_;
        } else {
            # we are the parent, just sit and wait for our kid to return
            waitpid($child, 0);
            # check to make sure that everything went according to plan
            if($? == -1) {
                die "Failed to execute command: @_\n";
            } elsif($? >> 8 != 0) {
                die "Command returned with error code: ", $? >> 8, ": @_\n";
            }
        }
    }
}

# this part is sorta crazy.  we want to auto-detect the crop region so we spawn
# mplayer telling it to cropdetect, but to step thru the video 60 seconds at a
# time but only do a max of 60 frames.  if this fails then we dont do the
# skipping.  finally, if this doesnt work we just warn the user but dont do any
# cropping.  we also tell it not to show audio or video here since this is just
# a command line script.  finally we grab the 'crop=...' part from the last
# line that starts with 'crop area:' since this is the region that mplayer
# decided is best.
sub get_crop {
    if($crop eq "autodetect") {
        print "\n### Calculating crop region...\n";
        if($pretend) {
            print "crop_region=\$(mplayer @dvd_device @infiles @opts -vo null ",
            "-ao null -vf cropdetect=50:4 -sstep 60 -frames 60 -v 2>/dev/null | ",
            "perl -lne '\$c = \$1 if /^.*Crop area:.*-vf (crop=[\\d:]+).*\$/;",
            " END {print \$c}')\n\n";
            $crop="\${crop_region},";
        } else {
            find_program("mplayer");
            my $crop_line;
            # so first we try stepping, and if that doesnt work we just do the
            # first 600 frames without skipping
            for my $args ([ qw"-sstep 60 -frames 60" ], [ qw"-frames 600" ]) {
                # this crazy stuff lets us read info from mplayer, but close
                # stdout so we dont get tons of error messages that fill up
                # the screen
                my $fork_pid = open(CROP, "-|");
                die "fork() failed: $!" unless defined $fork_pid;

                unless($fork_pid) {
                    close STDERR;
                    exec "mplayer", @dvd_device, @infiles, @opts,
                    qw(-vo null -ao null -vf cropdetect=50:4 -v), @{$args};
                } else {
                    # here we grab the second to last line to catch the case where
                    # only one 'Crop area:' line gets printed
                    $crop_line = (grep { /Crop area:/ } <CROP>)[-2];
                    last if $crop_line;
                }
            }
            ($crop) = ($crop_line =~ /-vf (crop=[\d:]+)/);
            if($crop) {
                print "# crop         = $crop\n";
                $crop .= ",";
            } else {
                print "# Could not auto-detect crop region!\n";
                $crop = "";
            }
        }
    } elsif($crop) {
        $crop = "crop=$crop,";
    }
}

sub get_aspect {
    if($crop eq "") {
        $height = -10;
        return;
    }
    my $output = qx/MPLAYER_VERBOSE=0 mplayer @dvd_device @infiles -vo null -ao null -frames 1 2>\/dev\/null/;
    $output =~ /^VO: \[null\] (\d+)x\d+ => (\d+)x\d+ Planar YV12/m or die "couldnt find aspect\n";
    my $stretch = $2/$1;
    if($pretend && $crop eq "\${crop_region},") {
        print 'video_height=$(perl -e \'@num = split /[:=]/, "\'$crop_region\'"; $height = $num[2]*', $width, '/$num[1]/', $stretch, '; print int($height/16+.5)*16, "\n"\')', "\n\n";
        $height = "\${video_height}";
    } else {
        my @num = split /[:=]/, $crop;
        #print "$output\n$1 $2 $stretch $crop $num[2] $num[1]\n";
        $height = $num[2]*$width/$num[1]/$stretch;
        $height = int($height/16+.5)*16;
    }
}

sub get_chapters {
    return unless (@chapters && !$chapters[1]);
    
    $chapters[1] = "chapters-$pid";
    my ($title) = $infiles[0] =~ m#^dvd://(\d+)$#;

    print "### Getting chapter information...\n";

    # if we're pretending, don't generate chapters file now but 
    if($pretend) {
        print "dvdxchap -t $title $dvd_device[1] > $chapters[1]\n\n";
    } else {
        find_program("dvdxchap");
        open DVDXCHAP, '-|', "dvdxchap", "-t", $title, $dvd_device[1];
        my @chapter_info = <DVDXCHAP>;
        close DVDXCHAP;
        
        open CHAPTERS, '>', $chapters[1];
        print CHAPTERS @chapter_info;
        close CHAPTERS;
    }
}

sub audio_pass {
    print "### Encoding audio...\n";
    # we need to encode an ogg file for each audio track we want in the mkv
    for my $aid (@aid)
    {
        # we write the audio data to a temp file since mplayer cant encode oggs nativly
        my $ogg;
        my $pcm;
        if (@$aid) {
            $ogg = "$temp_dir/audio-$pid-$aid->[1].ogg";
            $pcm = "$temp_dir/audio-$pid-$aid->[1].pcm";
        } else {
            $ogg = "$temp_dir/audio-$pid.ogg";
            $pcm = "$temp_dir/audio-$pid.pcm";
        }
        if($ffmpeg) {
            my $hex = sprintf("0x%X", $aid->[1]);
            my_system(qw"ffmpeg -v error -stats -i", @infiles, "-map",
                "i:".$hex, qw"-vn -b:a 96k -c:a libvorbis", $ogg);
        } else {
            my_system(qw"mplayer -benchmark -vo null -vc null -ao",
                "pcm:fast:file=$pcm", @infiles, @$aid, @opts, @dvd_device);
            my_system(qw(oggenc -b 96 -o), $ogg, $pcm);
        }

        push @oggs,$ogg;
    }
    
    # here we have to calculate the video bitrate if they just gave us a
    # target file size.  first we find the length and size of the audio track.
    # then we find out how much space we have left after subtracting the audio
    # size and container overhead from the target file size.  this crazy
    # calculation gives us our needed bitrate which we then round down to an
    # integer so mencoder doesnt barf.
    if($size) {
        if($pretend) {
            # some crazy commands to dynamically determine the video bitrate
            # if we are doing a 'pretend'
            print "\n### Determining video bitrate...\n";
            print "video_bitrate=\$(echo \"($size*1024*1024*.995 - \$(du -cb ", 
            @oggs," | tail -n1 | awk '{print \$1}')) / ",
            "\$(mplayer -frames 0 -identify -vo null @opts -ao null ",
            "$oggs[0] 2>/dev/null ",
            "| sed -ne 's/^ID_LENGTH=//p') / 1000 * 8\" | bc -l | sed -e ", 
            "'s/\\..*//')\n";
            $bitrate = "\${video_bitrate}" unless $bitrate;
        } else {
            find_program("mplayer");
            my $alength = 0;
            my $asize = 0;
            for my $file (@oggs) {
                open INDENT, "-|", qw(mplayer -v -frames 0 -identify -vo null), 
                qw(-ao null),@opts, $file;
                my $len = (grep { /^ID_LENGTH=[\d.]+$/ } (<INDENT>))[0];
                close INDENT;
	            $len =~ s/^ID_LENGTH=([\d.]+)$/$1/;
	            my $siz = -s $file; 

    	        $asize += $siz;
    	        $alength = $len;
    	    }
            die "Improper audio length: $alength seconds\n" unless $alength > 0;
            die "Improper audio size: $asize bytes\n" unless $asize > 0;
            $bitrate = int(($size*1024*1024*.995 - $asize)/$alength/1000*8);
            printf "# alength      = %.2f seconds\n", $alength;
            printf "# asize        = %.2f mb\n", $asize/1024/1024;
            print  "# bitrate      = $bitrate kbit\n";
        }
    }
}

# this is the first video pass command,  most of this stuff can be found in the
# mencoder man page but ill go thru some of it anyways.  we copy the audio from
# the input file even tho we already made the ogg stream so that mencoder can
# make sure the audio and video stay in sync by duping and dropping frames as
# appropriate.  the '-msglevel' thing just makes the progress info show up even
# when make all the rest of the output quiet.  we can write the output to
# /dev/null since this pass is just to write out passlogfile.  for the
# x264encopts, we tell it this is pass 1, the bitrate, and to skip really cpu
# intensive calcs since we are only generating a logfile.  the video filters
# the we apply obviously deinterlace, denoise, and scale,  the weird scaling
# stuff tells it to scale to the specified width and whatever height to
# maintain the aspect ratio but to round the height to the nearest multiple of
# 16 since that makes the video codec happy.
sub video1_pass {
    print "\n" unless $ffmpeg;
    print "### Encoding first pass...\n";
    my $filters = "${deint}${crop}${noise}scale=$width:$height";
    if($ffmpeg) {
        my_system(qw"ffmpeg -v error -stats -i", @infiles,
            qw"-an -c:v libx264 -preset:v veryslow -b:v", "${bitrate}k", "-filter:v",
            $filters, "-passlogfile", "$temp_dir/ffmpeg2pass-$pid",
            qw"-pass 1 -f avi -y /dev/null");
    } else {
        my_system(qw(mencoder -oac pcm -ovc x264 -zoom -msglevel statusline=5), 
            @infiles, "-passlogfile", "$temp_dir/divx2pass-$pid.log", "-o", 
            "/dev/null", "-x264encopts", "pass=1:bitrate=${bitrate}", 
            "-vf", $filters, @dvd_device, @opts, @sid, @fps, @{$aid[0]});
    }
}

# this is all basically the exact same thing as the first video pass except we
# actually write out a file instead of just generating a log and we skip the
# turbo option because of this.
sub video2_pass {
    print "\n" unless $ffmpeg;
    print "### Encoding second pass...\n";
    my $filters = "${deint}${crop}${noise}scale=$width:$height";
    if($ffmpeg) {
        my_system(qw"ffmpeg -v error -stats -i", @infiles,
            qw"-an -c:v libx264 -preset:v veryslow -b:v", "${bitrate}k", "-filter:v",
            $filters, "-passlogfile", "$temp_dir/ffmpeg2pass-$pid",
            qw"-pass 2 -f avi -y", "$temp_dir/video-$pid.avi");
    } else {
        my_system(qw(mencoder -oac pcm -ovc x264 -zoom -msglevel statusline=5),
            @infiles, "-passlogfile", "$temp_dir/divx2pass-$pid.log", "-o",
            "$temp_dir/video-$pid.avi", "-x264encopts", "pass=2:bitrate=${bitrate}", 
            "-vf", $filters, @dvd_device, @opts, @sid, @fps, @{$aid[0]});
    }
}

sub video_pass {
    print "\n" unless $ffmpeg;
    print "### Encoding video pass...\n";
    my $filters = "${deint}${crop}${noise}scale=$width:$height";
    my_system(qw"ffmpeg -v error -stats -i", @infiles,
        qw"-an -c:v libx264 -preset:v veryslow -crf", $quality, "-filter:v",
        $filters, qw"-f avi -y", "$temp_dir/video-$pid.avi");
}

# here we are mixing the audio stream from the ogg file with the video stream
# from the avi file we made.  the '-A' option tells mkvmerge to not use the
# audio stream from the avi file (we don't want this since this was just to
# allow mplayer to keep the audio and video in sync).  the default-language
# option is just so that it knows the audio is english.
sub mux_pass {
    print "\n" unless $ffmpeg;
    print "### Muxing audio and video...\n";
    my_system(qw(mkvmerge --engage allow_avc_in_vfw_mode --default-language 
        eng -o), "$outfile", "-A", "$temp_dir/video-$pid.avi", 
        @oggs, @chapters);
}

# remove the temp files unless the user told us not to or unless the final 
# file size is off by more than 2 percent
sub rm_tmp {
    return if $pretend;
    if($size) {
        my $final_size = -s $outfile;
        my $diff = ($final_size/1024/1024 - $size) / $size * 100;
        print "\n";
        printf "# target size = %.1f mb\n", $size;
        printf "# actual size = %.1f mb\n", $final_size/1024/1024;

        return if $keep;

        if(abs($diff) >= 2) {
            print "Final file size off by more than 2%, keeping temp files\n";
            $keep = 1;
        }
    }
    unless($keep) {
        if($ffmpeg) {
            unlink "$temp_dir/ffmpeg2pass-$pid-0.log", "$temp_dir/ffmpeg2pass-$pid-0.log.mbtree" unless $quality; 
        } else {
            unlink "$temp_dir/divx2pass-$pid.log", "$temp_dir/divx2pass-$pid.log.mbtree";
        }
        unlink "$temp_dir/video-$pid.avi", "$temp_dir/chapters-$pid";
        unlink "$temp_dir/$dumpfile" if $dumpfile ne "";
        for (@oggs) {
            unlink $_;
            s/\.ogg$/\.pcm/;
            unlink $_;
        }
    }
}

# this sub checks to make sure that the helper programs we need exist before we
# try to call them
sub find_program {
    my ($program) = @_;

    which($program)
        or die "Cannot find program '$program' in your path.\n";
}

# we use ddrescue or dd to make a copy of the disc before ripping it
sub copy_dvd {
    my $copy_output = $outfile;
    $copy_output =~ s/\.mkv$/.iso/;
    # for some reason the copy doesnt work unless we do a quick mplayer read first
    system("echo q | mplayer -dvd-device $dvd_device[1] dvd://1 > /dev/null 2>&1") unless $pretend;
    print "\n### Copying DVD to hard drive...\n";
    if(which("ddrescue")) {
        my_system("ddrescue", "-nv", $dvd_device[1], $copy_output);
    } else {
        my_system("dd", "if=$dvd_device[1]", "of=$copy_output");
    }
    $dvd_device[1] = $copy_output;
}

sub dump_stream {
    $dumpfile = "stream-$pid.dump";
    print "### Dumping video stream...\n";
    my_system("mplayer", @dvd_device, @infiles, "-dumpstream", "-dumpfile", "$temp_dir/$dumpfile");
    @dvd_device = ();
    @infiles = ("$temp_dir/$dumpfile");
}

sub which {
    my $prog = $_[0];
    for(split ":", $ENV{PATH}) {
        return "$_/$prog" if -e "$_/$prog";
    }
    return undef;
}

parse_args();
copy_dvd() if $copy;
get_crop();
get_aspect();
get_chapters();
dump_stream() if $ffmpeg;
audio_pass();
if($quality) {
    video_pass();
} else {
    video1_pass();
    video2_pass();
}
mux_pass();
rm_tmp();

=for comment
    
TODO:

make dvdrip work on multiple input files
make subtitles work with ffmpeg encoding
default output width to input width

=cut
