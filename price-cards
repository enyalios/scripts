#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Std;

my %opts;
getopts('uf', \%opts);
my $type = $opts{f}?"-foils":"";

if($opts{u}) {
    require LWP::Simple;
    print "updating price data...\n" if -t STDOUT;

    for("", "-foils") {
        my $data = LWP::Simple::get("http://magictraders.com/cgi-bin/query.cgi?list=magic$_&target=.&field=0&operator=re");
        $data =~ s/^.*<PRE>\n//s;
        $data =~ s/\n *<\/PRE>\n.*$//s;
        open(OUTPUT, ">$ENV{HOME}/magic/prices$_") or die "couldnt open output file\n";
        print OUTPUT $data;
        close OUTPUT;
    }

    exit;
}

open(FILE, "<$ENV{HOME}/magic/prices$type") or die "couldnt open prices file\n";
my @prices = <FILE>;

if(@ARGV) { # they gave us arguments to search for
    require LWP::Simple;
    my $page;

    # print out magic traders prices
    print "### MagicTraders\n";
    LINE: for(@prices) {
        for my $regex (@ARGV) { next LINE unless /$regex/i; }
        print;
    }

    # fetch and print cardshark prices
    # theres no easy way to search for foils on cardshark, so skip it
    unless($opts{f}) {
        $page = LWP::Simple::get("http://cardshark.com/Search.aspx?qu=" . join(' ', @ARGV));
        if(defined $page) {
            print "### CardShark\n";
            if($page =~ /CardShark\.com - Search for cards/) { # multiple results
                while($page =~  m!<a href="/Magic-the-Gathering/.*?">(.*?)</a></font></td><td><font color="Black"><a href="/Buy/Magic-the-Gathering/Find-Cards/.*?">(.*?)</a></font></td><td><font color="Black">.*?</font></td><td><font color="Black">.*?</font></td><td><font color="Black">(.*?)</font>!ig) {
                    my ($name, $set, $price) = ($1, $2, $3);
                    $price = "??" if $price eq "&nbsp;";
                    printf "%-30s %-30s %6s\n", $name, $set, $price;
                }
            } else { # returned a single card page
                my ($name, $set) = ($page =~ m!<span id="[^"]*_lblCardName" class="heading">(.*?)</span>.*?<span id="[^"]*_lblCardSet">(.*?)</span>!s);
                my ($price) = ($page =~ m!<tr class="tableViewRow" valign="top">\s*<td>(?:<font color="Black">)?\$([\d.]+)(?:</font>)?</td>!);
                $price = "??" if $price eq "&nbsp;";
                printf "%-30s %-30s %6s\n", $name, $set, $price;
            }
        }
    }

    # get star city games price data
    my $foil = $opts{f}?"foil":"nofoil";
    $page = LWP::Simple::get("http://sales.starcitygames.com/spoiler/display.php?name=" . join(" ", @ARGV) . "&namematch=AND&foil=$foil&for=no&display=4&numpage=100");
    if(defined $page) {
        my (%cards, $name, $set);
        for(split /<tr class="deckdbbody2?">/, $page) {
            my ($price, $count, @cells);
            my $full_line = 0;
            @cells = /<td class="deckdbbody2?">(.*?)<\/td>/sg;
            next unless @cells;
            if($cells[0] =~ /\n\s*(.*?)<\/a>/) {
                $name = $1;
                $set = $cells[1];
                $set =~ s/<.*?>//g;
                $full_line = 1;
            }
            next if $name =~ /\(Not Tournament Legal\)/;
            $price = $cells[ $full_line?8:6 ];
            $price =~ s/^\$//;
            $count = $cells[ $full_line?7:5 ];
            $count = 0 if $count eq "Out of Stock";
            $cards{$name}{$set}{count} += $count;
            $cards{$name}{$set}{min} = $price if(!defined $cards{$name}{$set}{min} || $price < $cards{$name}{$set}{min});
            $cards{$name}{$set}{max} = $price if(!defined $cards{$name}{$set}{max} || $price > $cards{$name}{$set}{max});
            #my $i = 0; print "  ", $i++, ": $_\n" for @cells;
        }

        print "### StarCityGames\n" if %cards;
        for my $name(sort keys %cards) {
            for my $set(sort keys %{$cards{$name}}) {
                printf "%-30s %-30s %6.2f  %3d\n",
                $name,
                $set,
                ($cards{$name}{$set}{min} + $cards{$name}{$set}{max}) / 2,
                $cards{$name}{$set}{count};
            }
        }
    }
} else { # no arguments, match cards on stdin
    while(<>) {
        chomp(my $card = $_);
        print grep { /^$card(,| \(.{1,4}\))/i } @prices;
    }
}
