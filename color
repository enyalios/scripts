#!/usr/bin/perl
#
# this script has 2 modes of operation.  if its first argument is a regex, then
# it colors stdin and any other files on the command line based on that regex.
# otherwise, it looks for regex color pairs in a ~/.colors file and colors all
# files on the command line based on those.

use warnings;
use strict;
use Term::ANSIColor;

my @regexs;
my $color_file = "$ENV{HOME}/.colors";

# set up the @regexs array with all the regex, color pairs
if($ARGV[0] && ! -f $ARGV[0]) { 
    my $regex = shift;
    push @regexs, [qr/$regex/ , "bold yellow"];
} else {
    open(CONFIG, "<$color_file") or die "couldnt open '$color_file'\n";

    while(<CONFIG>) {
        next if /^\s*(#|$)/;
        m#^\s*/(.*)/\s+([\w ]+)\s*$#;
        push @regexs, [qr/$1/, $2];
    }
}

# we loop over each line of input
while(my $line = <>) {
    # the @cols array ends up holding the color of each character in the
    # current line so we start out by initing it with 'RESET'
    my @cols = ("RESET") x length $line;

    # for each regex we paint over the @cols array wherever we match
    for(@regexs) {
        my ($regex, $color) = @{$_};
        while($line =~ /$regex/g) {
            if($-[1]) {
                # if there are parens in the regex, just color that part
                @cols[$-[1]..($+[1]-1)] = ($color) x ($+[1] - $-[1]);
            } else {
                # if not then color the entire matching part
                @cols[$-[0]..($+[0]-1)] = ($color) x ($+[0] - $-[0]);
            }
        } 
    }
    my $last_color = "";

    # then iterate over each character in the line
    for(my $i = 0; $i < length $line; $i++) {
        if($cols[$i] && $cols[$i] ne $last_color) {
            # if its different from the color of the last character then we
            # print out the new color, otherwise, dont bother
            print color("RESET"), color $cols[$i]; 
        }
        # then print out the character
        print substr $line, $i, 1;
        $last_color = $cols[$i];
    }
}
